// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dmsoft.proto

#include "dmsoft.pb.h"
#include "dmsoft.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace dmsoftRpc {

std::unique_ptr< dmPoolService::Stub> dmPoolService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< dmPoolService::Stub> stub(new dmPoolService::Stub(channel, options));
  return stub;
}

dmPoolService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel){}

dmPoolService::Service::Service() {
}

dmPoolService::Service::~Service() {
}


static const char* dmsoftService_method_names[] = {
  "/dmsoftRpc.dmsoftService/GetDmIndex",
  "/dmsoftRpc.dmsoftService/ReturnDmIndex",
  "/dmsoftRpc.dmsoftService/Ver",
  "/dmsoftRpc.dmsoftService/GetCursorPos",
  "/dmsoftRpc.dmsoftService/KeyDown",
  "/dmsoftRpc.dmsoftService/KeyDownChar",
  "/dmsoftRpc.dmsoftService/KeyPress",
  "/dmsoftRpc.dmsoftService/KeyUp",
  "/dmsoftRpc.dmsoftService/LeftClick",
  "/dmsoftRpc.dmsoftService/LeftDoubleClick",
  "/dmsoftRpc.dmsoftService/LeftDown",
  "/dmsoftRpc.dmsoftService/LeftUp",
  "/dmsoftRpc.dmsoftService/MoveR",
  "/dmsoftRpc.dmsoftService/MoveTo",
  "/dmsoftRpc.dmsoftService/MoveToEx",
  "/dmsoftRpc.dmsoftService/RightClick",
  "/dmsoftRpc.dmsoftService/RightDown",
  "/dmsoftRpc.dmsoftService/RightUp",
  "/dmsoftRpc.dmsoftService/FindMulColor",
  "/dmsoftRpc.dmsoftService/FindMultiColor",
  "/dmsoftRpc.dmsoftService/FindPic",
  "/dmsoftRpc.dmsoftService/GetColor",
  "/dmsoftRpc.dmsoftService/Reg",
  "/dmsoftRpc.dmsoftService/SetPath",
  "/dmsoftRpc.dmsoftService/BindWindowEx",
  "/dmsoftRpc.dmsoftService/DownCpu",
  "/dmsoftRpc.dmsoftService/EnableBind",
  "/dmsoftRpc.dmsoftService/IsBind",
  "/dmsoftRpc.dmsoftService/LockInput",
  "/dmsoftRpc.dmsoftService/UnBindWindow",
  "/dmsoftRpc.dmsoftService/MoveWindow",
  "/dmsoftRpc.dmsoftService/SetClientSize",
  "/dmsoftRpc.dmsoftService/SetWindowSize",
  "/dmsoftRpc.dmsoftService/SetWindowText",
};

std::unique_ptr< dmsoftService::Stub> dmsoftService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< dmsoftService::Stub> stub(new dmsoftService::Stub(channel, options));
  return stub;
}

dmsoftService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDmIndex_(dmsoftService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReturnDmIndex_(dmsoftService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Ver_(dmsoftService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCursorPos_(dmsoftService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyDown_(dmsoftService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyDownChar_(dmsoftService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyPress_(dmsoftService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_KeyUp_(dmsoftService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeftClick_(dmsoftService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeftDoubleClick_(dmsoftService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeftDown_(dmsoftService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LeftUp_(dmsoftService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveR_(dmsoftService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveTo_(dmsoftService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveToEx_(dmsoftService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RightClick_(dmsoftService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RightDown_(dmsoftService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RightUp_(dmsoftService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindMulColor_(dmsoftService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindMultiColor_(dmsoftService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindPic_(dmsoftService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetColor_(dmsoftService_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Reg_(dmsoftService_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPath_(dmsoftService_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BindWindowEx_(dmsoftService_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DownCpu_(dmsoftService_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EnableBind_(dmsoftService_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsBind_(dmsoftService_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockInput_(dmsoftService_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnBindWindow_(dmsoftService_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveWindow_(dmsoftService_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetClientSize_(dmsoftService_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWindowSize_(dmsoftService_method_names[32], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetWindowText_(dmsoftService_method_names[33], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status dmsoftService::Stub::GetDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::GetDmIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::GetDmIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDmIndex_, context, request, response);
}

void dmsoftService::Stub::async::GetDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::GetDmIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::GetDmIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDmIndex_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::GetDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::GetDmIndexResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDmIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::GetDmIndexResponse>* dmsoftService::Stub::PrepareAsyncGetDmIndexRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::GetDmIndexResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDmIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::GetDmIndexResponse>* dmsoftService::Stub::AsyncGetDmIndexRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDmIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::ReturnDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ReturnDmIndex_, context, request, response);
}

void dmsoftService::Stub::async::ReturnDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnDmIndex_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::ReturnDmIndex(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ReturnDmIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncReturnDmIndexRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ReturnDmIndex_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncReturnDmIndexRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncReturnDmIndexRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::Ver(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::VerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::VerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Ver_, context, request, response);
}

void dmsoftService::Stub::async::Ver(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::VerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::VerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ver_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::Ver(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::VerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Ver_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::VerResponse>* dmsoftService::Stub::PrepareAsyncVerRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::VerResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Ver_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::VerResponse>* dmsoftService::Stub::AsyncVerRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::GetCursorPos(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::PointResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::PointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCursorPos_, context, request, response);
}

void dmsoftService::Stub::async::GetCursorPos(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::PointResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::PointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCursorPos_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::GetCursorPos(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::PointResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCursorPos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::PointResponse>* dmsoftService::Stub::PrepareAsyncGetCursorPosRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::PointResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCursorPos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::PointResponse>* dmsoftService::Stub::AsyncGetCursorPosRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCursorPosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::KeyDown(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::KeyDownRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyDown_, context, request, response);
}

void dmsoftService::Stub::async::KeyDown(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::KeyDownRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyDown_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::KeyDown(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncKeyDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::KeyDownRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncKeyDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::KeyDownChar(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownCharRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::KeyDownCharRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyDownChar_, context, request, response);
}

void dmsoftService::Stub::async::KeyDownChar(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownCharRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::KeyDownCharRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyDownChar_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::KeyDownChar(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownCharRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyDownChar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncKeyDownCharRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownCharRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::KeyDownCharRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyDownChar_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncKeyDownCharRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyDownCharRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyDownCharRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::KeyPress(::grpc::ClientContext* context, const ::dmsoftRpc::KeyPressRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::KeyPressRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyPress_, context, request, response);
}

void dmsoftService::Stub::async::KeyPress(::grpc::ClientContext* context, const ::dmsoftRpc::KeyPressRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::KeyPressRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyPress_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::KeyPress(::grpc::ClientContext* context, const ::dmsoftRpc::KeyPressRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyPress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncKeyPressRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyPressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::KeyPressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyPress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncKeyPressRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyPressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyPressRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::KeyUp(::grpc::ClientContext* context, const ::dmsoftRpc::KeyUpRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::KeyUpRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_KeyUp_, context, request, response);
}

void dmsoftService::Stub::async::KeyUp(::grpc::ClientContext* context, const ::dmsoftRpc::KeyUpRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::KeyUpRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyUp_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::KeyUp(::grpc::ClientContext* context, const ::dmsoftRpc::KeyUpRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_KeyUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncKeyUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyUpRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::KeyUpRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_KeyUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncKeyUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::KeyUpRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncKeyUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::LeftClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeftClick_, context, request, response);
}

void dmsoftService::Stub::async::LeftClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftClick_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::LeftClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftClick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncLeftClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeftClick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncLeftClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeftClickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::LeftDoubleClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeftDoubleClick_, context, request, response);
}

void dmsoftService::Stub::async::LeftDoubleClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftDoubleClick_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::LeftDoubleClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftDoubleClick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncLeftDoubleClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeftDoubleClick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncLeftDoubleClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeftDoubleClickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::LeftDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeftDown_, context, request, response);
}

void dmsoftService::Stub::async::LeftDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftDown_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::LeftDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncLeftDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeftDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncLeftDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeftDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::LeftUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LeftUp_, context, request, response);
}

void dmsoftService::Stub::async::LeftUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftUp_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::LeftUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LeftUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncLeftUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LeftUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncLeftUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLeftUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::MoveR(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveR_, context, request, response);
}

void dmsoftService::Stub::async::MoveR(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveR_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::MoveR(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveR_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncMoveRRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::PointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveR_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncMoveRRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveRRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::MoveTo(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveTo_, context, request, response);
}

void dmsoftService::Stub::async::MoveTo(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::MoveTo(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveTo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncMoveToRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::PointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveTo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncMoveToRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveToRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::MoveToEx(::grpc::ClientContext* context, const ::dmsoftRpc::RectRequest& request, ::dmsoftRpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::RectRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveToEx_, context, request, response);
}

void dmsoftService::Stub::async::MoveToEx(::grpc::ClientContext* context, const ::dmsoftRpc::RectRequest* request, ::dmsoftRpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::RectRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToEx_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::MoveToEx(::grpc::ClientContext* context, const ::dmsoftRpc::RectRequest* request, ::dmsoftRpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToEx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::StringResponse>* dmsoftService::Stub::PrepareAsyncMoveToExRaw(::grpc::ClientContext* context, const ::dmsoftRpc::RectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::StringResponse, ::dmsoftRpc::RectRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveToEx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::StringResponse>* dmsoftService::Stub::AsyncMoveToExRaw(::grpc::ClientContext* context, const ::dmsoftRpc::RectRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveToExRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::RightClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RightClick_, context, request, response);
}

void dmsoftService::Stub::async::RightClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightClick_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::RightClick(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightClick_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncRightClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RightClick_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncRightClickRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRightClickRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::RightDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RightDown_, context, request, response);
}

void dmsoftService::Stub::async::RightDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightDown_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::RightDown(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightDown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncRightDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RightDown_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncRightDownRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRightDownRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::RightUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RightUp_, context, request, response);
}

void dmsoftService::Stub::async::RightUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightUp_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::RightUp(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RightUp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncRightUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RightUp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncRightUpRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRightUpRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::FindMulColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::FindMultiColorRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindMulColor_, context, request, response);
}

void dmsoftService::Stub::async::FindMulColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::FindMultiColorRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMulColor_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::FindMulColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMulColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncFindMulColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::FindMultiColorRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindMulColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncFindMulColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindMulColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::FindMultiColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorExRequest& request, ::dmsoftRpc::FindMultiColorResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::FindMultiColorExRequest, ::dmsoftRpc::FindMultiColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindMultiColor_, context, request, response);
}

void dmsoftService::Stub::async::FindMultiColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorExRequest* request, ::dmsoftRpc::FindMultiColorResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::FindMultiColorExRequest, ::dmsoftRpc::FindMultiColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMultiColor_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::FindMultiColor(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorExRequest* request, ::dmsoftRpc::FindMultiColorResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindMultiColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::FindMultiColorResponse>* dmsoftService::Stub::PrepareAsyncFindMultiColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorExRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::FindMultiColorResponse, ::dmsoftRpc::FindMultiColorExRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindMultiColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::FindMultiColorResponse>* dmsoftService::Stub::AsyncFindMultiColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindMultiColorExRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindMultiColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::FindPic(::grpc::ClientContext* context, const ::dmsoftRpc::FindPicRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::FindPicRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindPic_, context, request, response);
}

void dmsoftService::Stub::async::FindPic(::grpc::ClientContext* context, const ::dmsoftRpc::FindPicRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::FindPicRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPic_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::FindPic(::grpc::ClientContext* context, const ::dmsoftRpc::FindPicRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindPic_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncFindPicRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindPicRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::FindPicRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindPic_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncFindPicRaw(::grpc::ClientContext* context, const ::dmsoftRpc::FindPicRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindPicRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::GetColor(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::dmsoftRpc::StringResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetColor_, context, request, response);
}

void dmsoftService::Stub::async::GetColor(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::StringResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::PointRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetColor_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::GetColor(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::StringResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetColor_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::StringResponse>* dmsoftService::Stub::PrepareAsyncGetColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::StringResponse, ::dmsoftRpc::PointRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetColor_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::StringResponse>* dmsoftService::Stub::AsyncGetColorRaw(::grpc::ClientContext* context, const ::dmsoftRpc::PointRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetColorRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::Reg(::grpc::ClientContext* context, const ::dmsoftRpc::RegRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::RegRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Reg_, context, request, response);
}

void dmsoftService::Stub::async::Reg(::grpc::ClientContext* context, const ::dmsoftRpc::RegRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::RegRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reg_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::Reg(::grpc::ClientContext* context, const ::dmsoftRpc::RegRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Reg_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncRegRaw(::grpc::ClientContext* context, const ::dmsoftRpc::RegRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::RegRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Reg_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncRegRaw(::grpc::ClientContext* context, const ::dmsoftRpc::RegRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::SetPath(::grpc::ClientContext* context, const ::dmsoftRpc::StringRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::StringRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPath_, context, request, response);
}

void dmsoftService::Stub::async::SetPath(::grpc::ClientContext* context, const ::dmsoftRpc::StringRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::StringRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPath_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::SetPath(::grpc::ClientContext* context, const ::dmsoftRpc::StringRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPath_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncSetPathRaw(::grpc::ClientContext* context, const ::dmsoftRpc::StringRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::StringRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPath_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncSetPathRaw(::grpc::ClientContext* context, const ::dmsoftRpc::StringRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPathRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::BindWindowEx(::grpc::ClientContext* context, const ::dmsoftRpc::BindWindowExRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::BindWindowExRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BindWindowEx_, context, request, response);
}

void dmsoftService::Stub::async::BindWindowEx(::grpc::ClientContext* context, const ::dmsoftRpc::BindWindowExRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::BindWindowExRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindWindowEx_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::BindWindowEx(::grpc::ClientContext* context, const ::dmsoftRpc::BindWindowExRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BindWindowEx_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncBindWindowExRaw(::grpc::ClientContext* context, const ::dmsoftRpc::BindWindowExRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::BindWindowExRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BindWindowEx_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncBindWindowExRaw(::grpc::ClientContext* context, const ::dmsoftRpc::BindWindowExRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncBindWindowExRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::DownCpu(::grpc::ClientContext* context, const ::dmsoftRpc::DownCpuRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::DownCpuRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DownCpu_, context, request, response);
}

void dmsoftService::Stub::async::DownCpu(::grpc::ClientContext* context, const ::dmsoftRpc::DownCpuRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::DownCpuRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownCpu_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::DownCpu(::grpc::ClientContext* context, const ::dmsoftRpc::DownCpuRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DownCpu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncDownCpuRaw(::grpc::ClientContext* context, const ::dmsoftRpc::DownCpuRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::DownCpuRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DownCpu_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncDownCpuRaw(::grpc::ClientContext* context, const ::dmsoftRpc::DownCpuRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDownCpuRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::EnableBind(::grpc::ClientContext* context, const ::dmsoftRpc::EnableBindRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::EnableBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EnableBind_, context, request, response);
}

void dmsoftService::Stub::async::EnableBind(::grpc::ClientContext* context, const ::dmsoftRpc::EnableBindRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::EnableBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBind_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::EnableBind(::grpc::ClientContext* context, const ::dmsoftRpc::EnableBindRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EnableBind_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncEnableBindRaw(::grpc::ClientContext* context, const ::dmsoftRpc::EnableBindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::EnableBindRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EnableBind_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncEnableBindRaw(::grpc::ClientContext* context, const ::dmsoftRpc::EnableBindRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEnableBindRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::IsBind(::grpc::ClientContext* context, const ::dmsoftRpc::IsBindRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IsBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsBind_, context, request, response);
}

void dmsoftService::Stub::async::IsBind(::grpc::ClientContext* context, const ::dmsoftRpc::IsBindRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IsBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsBind_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::IsBind(::grpc::ClientContext* context, const ::dmsoftRpc::IsBindRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsBind_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncIsBindRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IsBindRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IsBindRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsBind_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncIsBindRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IsBindRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsBindRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::LockInput(::grpc::ClientContext* context, const ::dmsoftRpc::LockRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::LockRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LockInput_, context, request, response);
}

void dmsoftService::Stub::async::LockInput(::grpc::ClientContext* context, const ::dmsoftRpc::LockRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::LockRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockInput_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::LockInput(::grpc::ClientContext* context, const ::dmsoftRpc::LockRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockInput_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncLockInputRaw(::grpc::ClientContext* context, const ::dmsoftRpc::LockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::LockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LockInput_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncLockInputRaw(::grpc::ClientContext* context, const ::dmsoftRpc::LockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockInputRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::UnBindWindow(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnBindWindow_, context, request, response);
}

void dmsoftService::Stub::async::UnBindWindow(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnBindWindow_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::UnBindWindow(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnBindWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncUnBindWindowRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::IndexRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnBindWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncUnBindWindowRaw(::grpc::ClientContext* context, const ::dmsoftRpc::IndexRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnBindWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::MoveWindow(::grpc::ClientContext* context, const ::dmsoftRpc::MoveWindowRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::MoveWindowRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveWindow_, context, request, response);
}

void dmsoftService::Stub::async::MoveWindow(::grpc::ClientContext* context, const ::dmsoftRpc::MoveWindowRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::MoveWindowRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveWindow_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::MoveWindow(::grpc::ClientContext* context, const ::dmsoftRpc::MoveWindowRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveWindow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncMoveWindowRaw(::grpc::ClientContext* context, const ::dmsoftRpc::MoveWindowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::MoveWindowRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveWindow_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncMoveWindowRaw(::grpc::ClientContext* context, const ::dmsoftRpc::MoveWindowRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveWindowRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::SetClientSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetClientSizeRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::SetClientSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetClientSize_, context, request, response);
}

void dmsoftService::Stub::async::SetClientSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetClientSizeRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::SetClientSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClientSize_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::SetClientSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetClientSizeRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetClientSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncSetClientSizeRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetClientSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::SetClientSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetClientSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncSetClientSizeRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetClientSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetClientSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::SetWindowSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowSizeRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::SetWindowSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetWindowSize_, context, request, response);
}

void dmsoftService::Stub::async::SetWindowSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowSizeRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::SetWindowSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWindowSize_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::SetWindowSize(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowSizeRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWindowSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncSetWindowSizeRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::SetWindowSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetWindowSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncSetWindowSizeRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetWindowSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status dmsoftService::Stub::SetWindowText(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowTextRequest& request, ::dmsoftRpc::IsOkResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::dmsoftRpc::SetWindowTextRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetWindowText_, context, request, response);
}

void dmsoftService::Stub::async::SetWindowText(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowTextRequest* request, ::dmsoftRpc::IsOkResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::dmsoftRpc::SetWindowTextRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWindowText_, context, request, response, std::move(f));
}

void dmsoftService::Stub::async::SetWindowText(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowTextRequest* request, ::dmsoftRpc::IsOkResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetWindowText_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::PrepareAsyncSetWindowTextRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowTextRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::dmsoftRpc::IsOkResponse, ::dmsoftRpc::SetWindowTextRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetWindowText_, context, request);
}

::grpc::ClientAsyncResponseReader< ::dmsoftRpc::IsOkResponse>* dmsoftService::Stub::AsyncSetWindowTextRaw(::grpc::ClientContext* context, const ::dmsoftRpc::SetWindowTextRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetWindowTextRaw(context, request, cq);
  result->StartCall();
  return result;
}

dmsoftService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::GetDmIndexResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::GetDmIndexResponse* resp) {
               return service->GetDmIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->ReturnDmIndex(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::VerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::VerResponse* resp) {
               return service->Ver(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::PointResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::PointResponse* resp) {
               return service->GetCursorPos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::KeyDownRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::KeyDownRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->KeyDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::KeyDownCharRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::KeyDownCharRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->KeyDownChar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::KeyPressRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::KeyPressRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->KeyPress(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::KeyUpRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::KeyUpRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->KeyUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->LeftClick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->LeftDoubleClick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->LeftDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->LeftUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::PointRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->MoveR(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::PointRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::PointRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->MoveTo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::RectRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::RectRequest* req,
             ::dmsoftRpc::StringResponse* resp) {
               return service->MoveToEx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->RightClick(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->RightDown(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->RightUp(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::FindMultiColorRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::FindMultiColorRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->FindMulColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::FindMultiColorExRequest, ::dmsoftRpc::FindMultiColorResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::FindMultiColorExRequest* req,
             ::dmsoftRpc::FindMultiColorResponse* resp) {
               return service->FindMultiColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::FindPicRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::FindPicRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->FindPic(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::PointRequest, ::dmsoftRpc::StringResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::PointRequest* req,
             ::dmsoftRpc::StringResponse* resp) {
               return service->GetColor(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::RegRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::RegRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->Reg(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::StringRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::StringRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->SetPath(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::BindWindowExRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::BindWindowExRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->BindWindowEx(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::DownCpuRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::DownCpuRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->DownCpu(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::EnableBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::EnableBindRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->EnableBind(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IsBindRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IsBindRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->IsBind(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::LockRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::LockRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->LockInput(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::IndexRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::IndexRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->UnBindWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::MoveWindowRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::MoveWindowRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->MoveWindow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::SetClientSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::SetClientSizeRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->SetClientSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::SetWindowSizeRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::SetWindowSizeRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->SetWindowSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      dmsoftService_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< dmsoftService::Service, ::dmsoftRpc::SetWindowTextRequest, ::dmsoftRpc::IsOkResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](dmsoftService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::dmsoftRpc::SetWindowTextRequest* req,
             ::dmsoftRpc::IsOkResponse* resp) {
               return service->SetWindowText(ctx, req, resp);
             }, this)));
}

dmsoftService::Service::~Service() {
}

::grpc::Status dmsoftService::Service::GetDmIndex(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::GetDmIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::ReturnDmIndex(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::Ver(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::VerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::GetCursorPos(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::PointResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::KeyDown(::grpc::ServerContext* context, const ::dmsoftRpc::KeyDownRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::KeyDownChar(::grpc::ServerContext* context, const ::dmsoftRpc::KeyDownCharRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::KeyPress(::grpc::ServerContext* context, const ::dmsoftRpc::KeyPressRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::KeyUp(::grpc::ServerContext* context, const ::dmsoftRpc::KeyUpRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::LeftClick(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::LeftDoubleClick(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::LeftDown(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::LeftUp(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::MoveR(::grpc::ServerContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::MoveTo(::grpc::ServerContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::MoveToEx(::grpc::ServerContext* context, const ::dmsoftRpc::RectRequest* request, ::dmsoftRpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::RightClick(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::RightDown(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::RightUp(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::FindMulColor(::grpc::ServerContext* context, const ::dmsoftRpc::FindMultiColorRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::FindMultiColor(::grpc::ServerContext* context, const ::dmsoftRpc::FindMultiColorExRequest* request, ::dmsoftRpc::FindMultiColorResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::FindPic(::grpc::ServerContext* context, const ::dmsoftRpc::FindPicRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::GetColor(::grpc::ServerContext* context, const ::dmsoftRpc::PointRequest* request, ::dmsoftRpc::StringResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::Reg(::grpc::ServerContext* context, const ::dmsoftRpc::RegRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::SetPath(::grpc::ServerContext* context, const ::dmsoftRpc::StringRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::BindWindowEx(::grpc::ServerContext* context, const ::dmsoftRpc::BindWindowExRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::DownCpu(::grpc::ServerContext* context, const ::dmsoftRpc::DownCpuRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::EnableBind(::grpc::ServerContext* context, const ::dmsoftRpc::EnableBindRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::IsBind(::grpc::ServerContext* context, const ::dmsoftRpc::IsBindRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::LockInput(::grpc::ServerContext* context, const ::dmsoftRpc::LockRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::UnBindWindow(::grpc::ServerContext* context, const ::dmsoftRpc::IndexRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::MoveWindow(::grpc::ServerContext* context, const ::dmsoftRpc::MoveWindowRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::SetClientSize(::grpc::ServerContext* context, const ::dmsoftRpc::SetClientSizeRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::SetWindowSize(::grpc::ServerContext* context, const ::dmsoftRpc::SetWindowSizeRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status dmsoftService::Service::SetWindowText(::grpc::ServerContext* context, const ::dmsoftRpc::SetWindowTextRequest* request, ::dmsoftRpc::IsOkResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dmsoftRpc

