// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmsoft.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dmsoft_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dmsoft_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dmsoft_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dmsoft_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dmsoft_2eproto;
namespace dmsoftRpc {
class BindWindowExRequest;
struct BindWindowExRequestDefaultTypeInternal;
extern BindWindowExRequestDefaultTypeInternal _BindWindowExRequest_default_instance_;
class DownCpuRequest;
struct DownCpuRequestDefaultTypeInternal;
extern DownCpuRequestDefaultTypeInternal _DownCpuRequest_default_instance_;
class EnableBindRequest;
struct EnableBindRequestDefaultTypeInternal;
extern EnableBindRequestDefaultTypeInternal _EnableBindRequest_default_instance_;
class FindMultiColorExRequest;
struct FindMultiColorExRequestDefaultTypeInternal;
extern FindMultiColorExRequestDefaultTypeInternal _FindMultiColorExRequest_default_instance_;
class FindMultiColorRequest;
struct FindMultiColorRequestDefaultTypeInternal;
extern FindMultiColorRequestDefaultTypeInternal _FindMultiColorRequest_default_instance_;
class FindMultiColorResponse;
struct FindMultiColorResponseDefaultTypeInternal;
extern FindMultiColorResponseDefaultTypeInternal _FindMultiColorResponse_default_instance_;
class FindPicRequest;
struct FindPicRequestDefaultTypeInternal;
extern FindPicRequestDefaultTypeInternal _FindPicRequest_default_instance_;
class FindPicResponse;
struct FindPicResponseDefaultTypeInternal;
extern FindPicResponseDefaultTypeInternal _FindPicResponse_default_instance_;
class GetDmIndexResponse;
struct GetDmIndexResponseDefaultTypeInternal;
extern GetDmIndexResponseDefaultTypeInternal _GetDmIndexResponse_default_instance_;
class IndexRequest;
struct IndexRequestDefaultTypeInternal;
extern IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
class IsBindRequest;
struct IsBindRequestDefaultTypeInternal;
extern IsBindRequestDefaultTypeInternal _IsBindRequest_default_instance_;
class IsOkResponse;
struct IsOkResponseDefaultTypeInternal;
extern IsOkResponseDefaultTypeInternal _IsOkResponse_default_instance_;
class KeyDownCharRequest;
struct KeyDownCharRequestDefaultTypeInternal;
extern KeyDownCharRequestDefaultTypeInternal _KeyDownCharRequest_default_instance_;
class KeyDownRequest;
struct KeyDownRequestDefaultTypeInternal;
extern KeyDownRequestDefaultTypeInternal _KeyDownRequest_default_instance_;
class KeyPressRequest;
struct KeyPressRequestDefaultTypeInternal;
extern KeyPressRequestDefaultTypeInternal _KeyPressRequest_default_instance_;
class KeyUpRequest;
struct KeyUpRequestDefaultTypeInternal;
extern KeyUpRequestDefaultTypeInternal _KeyUpRequest_default_instance_;
class LockRequest;
struct LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class MoveWindowRequest;
struct MoveWindowRequestDefaultTypeInternal;
extern MoveWindowRequestDefaultTypeInternal _MoveWindowRequest_default_instance_;
class PointRequest;
struct PointRequestDefaultTypeInternal;
extern PointRequestDefaultTypeInternal _PointRequest_default_instance_;
class PointResponse;
struct PointResponseDefaultTypeInternal;
extern PointResponseDefaultTypeInternal _PointResponse_default_instance_;
class RectRequest;
struct RectRequestDefaultTypeInternal;
extern RectRequestDefaultTypeInternal _RectRequest_default_instance_;
class RegRequest;
struct RegRequestDefaultTypeInternal;
extern RegRequestDefaultTypeInternal _RegRequest_default_instance_;
class SetClientSizeRequest;
struct SetClientSizeRequestDefaultTypeInternal;
extern SetClientSizeRequestDefaultTypeInternal _SetClientSizeRequest_default_instance_;
class SetWindowSizeRequest;
struct SetWindowSizeRequestDefaultTypeInternal;
extern SetWindowSizeRequestDefaultTypeInternal _SetWindowSizeRequest_default_instance_;
class SetWindowTextRequest;
struct SetWindowTextRequestDefaultTypeInternal;
extern SetWindowTextRequestDefaultTypeInternal _SetWindowTextRequest_default_instance_;
class StringRequest;
struct StringRequestDefaultTypeInternal;
extern StringRequestDefaultTypeInternal _StringRequest_default_instance_;
class StringResponse;
struct StringResponseDefaultTypeInternal;
extern StringResponseDefaultTypeInternal _StringResponse_default_instance_;
class VerResponse;
struct VerResponseDefaultTypeInternal;
extern VerResponseDefaultTypeInternal _VerResponse_default_instance_;
}  // namespace dmsoftRpc
PROTOBUF_NAMESPACE_OPEN
template<> ::dmsoftRpc::BindWindowExRequest* Arena::CreateMaybeMessage<::dmsoftRpc::BindWindowExRequest>(Arena*);
template<> ::dmsoftRpc::DownCpuRequest* Arena::CreateMaybeMessage<::dmsoftRpc::DownCpuRequest>(Arena*);
template<> ::dmsoftRpc::EnableBindRequest* Arena::CreateMaybeMessage<::dmsoftRpc::EnableBindRequest>(Arena*);
template<> ::dmsoftRpc::FindMultiColorExRequest* Arena::CreateMaybeMessage<::dmsoftRpc::FindMultiColorExRequest>(Arena*);
template<> ::dmsoftRpc::FindMultiColorRequest* Arena::CreateMaybeMessage<::dmsoftRpc::FindMultiColorRequest>(Arena*);
template<> ::dmsoftRpc::FindMultiColorResponse* Arena::CreateMaybeMessage<::dmsoftRpc::FindMultiColorResponse>(Arena*);
template<> ::dmsoftRpc::FindPicRequest* Arena::CreateMaybeMessage<::dmsoftRpc::FindPicRequest>(Arena*);
template<> ::dmsoftRpc::FindPicResponse* Arena::CreateMaybeMessage<::dmsoftRpc::FindPicResponse>(Arena*);
template<> ::dmsoftRpc::GetDmIndexResponse* Arena::CreateMaybeMessage<::dmsoftRpc::GetDmIndexResponse>(Arena*);
template<> ::dmsoftRpc::IndexRequest* Arena::CreateMaybeMessage<::dmsoftRpc::IndexRequest>(Arena*);
template<> ::dmsoftRpc::IsBindRequest* Arena::CreateMaybeMessage<::dmsoftRpc::IsBindRequest>(Arena*);
template<> ::dmsoftRpc::IsOkResponse* Arena::CreateMaybeMessage<::dmsoftRpc::IsOkResponse>(Arena*);
template<> ::dmsoftRpc::KeyDownCharRequest* Arena::CreateMaybeMessage<::dmsoftRpc::KeyDownCharRequest>(Arena*);
template<> ::dmsoftRpc::KeyDownRequest* Arena::CreateMaybeMessage<::dmsoftRpc::KeyDownRequest>(Arena*);
template<> ::dmsoftRpc::KeyPressRequest* Arena::CreateMaybeMessage<::dmsoftRpc::KeyPressRequest>(Arena*);
template<> ::dmsoftRpc::KeyUpRequest* Arena::CreateMaybeMessage<::dmsoftRpc::KeyUpRequest>(Arena*);
template<> ::dmsoftRpc::LockRequest* Arena::CreateMaybeMessage<::dmsoftRpc::LockRequest>(Arena*);
template<> ::dmsoftRpc::MoveWindowRequest* Arena::CreateMaybeMessage<::dmsoftRpc::MoveWindowRequest>(Arena*);
template<> ::dmsoftRpc::PointRequest* Arena::CreateMaybeMessage<::dmsoftRpc::PointRequest>(Arena*);
template<> ::dmsoftRpc::PointResponse* Arena::CreateMaybeMessage<::dmsoftRpc::PointResponse>(Arena*);
template<> ::dmsoftRpc::RectRequest* Arena::CreateMaybeMessage<::dmsoftRpc::RectRequest>(Arena*);
template<> ::dmsoftRpc::RegRequest* Arena::CreateMaybeMessage<::dmsoftRpc::RegRequest>(Arena*);
template<> ::dmsoftRpc::SetClientSizeRequest* Arena::CreateMaybeMessage<::dmsoftRpc::SetClientSizeRequest>(Arena*);
template<> ::dmsoftRpc::SetWindowSizeRequest* Arena::CreateMaybeMessage<::dmsoftRpc::SetWindowSizeRequest>(Arena*);
template<> ::dmsoftRpc::SetWindowTextRequest* Arena::CreateMaybeMessage<::dmsoftRpc::SetWindowTextRequest>(Arena*);
template<> ::dmsoftRpc::StringRequest* Arena::CreateMaybeMessage<::dmsoftRpc::StringRequest>(Arena*);
template<> ::dmsoftRpc::StringResponse* Arena::CreateMaybeMessage<::dmsoftRpc::StringResponse>(Arena*);
template<> ::dmsoftRpc::VerResponse* Arena::CreateMaybeMessage<::dmsoftRpc::VerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dmsoftRpc {

// ===================================================================

class GetDmIndexResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.GetDmIndexResponse) */ {
 public:
  inline GetDmIndexResponse() : GetDmIndexResponse(nullptr) {}
  ~GetDmIndexResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDmIndexResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDmIndexResponse(const GetDmIndexResponse& from);
  GetDmIndexResponse(GetDmIndexResponse&& from) noexcept
    : GetDmIndexResponse() {
    *this = ::std::move(from);
  }

  inline GetDmIndexResponse& operator=(const GetDmIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDmIndexResponse& operator=(GetDmIndexResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDmIndexResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDmIndexResponse* internal_default_instance() {
    return reinterpret_cast<const GetDmIndexResponse*>(
               &_GetDmIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetDmIndexResponse& a, GetDmIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDmIndexResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDmIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDmIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDmIndexResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDmIndexResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDmIndexResponse& from) {
    GetDmIndexResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDmIndexResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.GetDmIndexResponse";
  }
  protected:
  explicit GetDmIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.GetDmIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class SetWindowTextRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.SetWindowTextRequest) */ {
 public:
  inline SetWindowTextRequest() : SetWindowTextRequest(nullptr) {}
  ~SetWindowTextRequest() override;
  explicit PROTOBUF_CONSTEXPR SetWindowTextRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWindowTextRequest(const SetWindowTextRequest& from);
  SetWindowTextRequest(SetWindowTextRequest&& from) noexcept
    : SetWindowTextRequest() {
    *this = ::std::move(from);
  }

  inline SetWindowTextRequest& operator=(const SetWindowTextRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWindowTextRequest& operator=(SetWindowTextRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWindowTextRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWindowTextRequest* internal_default_instance() {
    return reinterpret_cast<const SetWindowTextRequest*>(
               &_SetWindowTextRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetWindowTextRequest& a, SetWindowTextRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWindowTextRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWindowTextRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWindowTextRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWindowTextRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWindowTextRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWindowTextRequest& from) {
    SetWindowTextRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWindowTextRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.SetWindowTextRequest";
  }
  protected:
  explicit SetWindowTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 3,
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
  };
  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.SetWindowTextRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t index_;
    int32_t hwnd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class SetWindowSizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.SetWindowSizeRequest) */ {
 public:
  inline SetWindowSizeRequest() : SetWindowSizeRequest(nullptr) {}
  ~SetWindowSizeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetWindowSizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetWindowSizeRequest(const SetWindowSizeRequest& from);
  SetWindowSizeRequest(SetWindowSizeRequest&& from) noexcept
    : SetWindowSizeRequest() {
    *this = ::std::move(from);
  }

  inline SetWindowSizeRequest& operator=(const SetWindowSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetWindowSizeRequest& operator=(SetWindowSizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetWindowSizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetWindowSizeRequest* internal_default_instance() {
    return reinterpret_cast<const SetWindowSizeRequest*>(
               &_SetWindowSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetWindowSizeRequest& a, SetWindowSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetWindowSizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetWindowSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetWindowSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetWindowSizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetWindowSizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetWindowSizeRequest& from) {
    SetWindowSizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetWindowSizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.SetWindowSizeRequest";
  }
  protected:
  explicit SetWindowSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.SetWindowSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t hwnd_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class SetClientSizeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.SetClientSizeRequest) */ {
 public:
  inline SetClientSizeRequest() : SetClientSizeRequest(nullptr) {}
  ~SetClientSizeRequest() override;
  explicit PROTOBUF_CONSTEXPR SetClientSizeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetClientSizeRequest(const SetClientSizeRequest& from);
  SetClientSizeRequest(SetClientSizeRequest&& from) noexcept
    : SetClientSizeRequest() {
    *this = ::std::move(from);
  }

  inline SetClientSizeRequest& operator=(const SetClientSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetClientSizeRequest& operator=(SetClientSizeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetClientSizeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetClientSizeRequest* internal_default_instance() {
    return reinterpret_cast<const SetClientSizeRequest*>(
               &_SetClientSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetClientSizeRequest& a, SetClientSizeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetClientSizeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetClientSizeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetClientSizeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetClientSizeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetClientSizeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SetClientSizeRequest& from) {
    SetClientSizeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetClientSizeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.SetClientSizeRequest";
  }
  protected:
  explicit SetClientSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.SetClientSizeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t hwnd_;
    int32_t width_;
    int32_t height_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class MoveWindowRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.MoveWindowRequest) */ {
 public:
  inline MoveWindowRequest() : MoveWindowRequest(nullptr) {}
  ~MoveWindowRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveWindowRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveWindowRequest(const MoveWindowRequest& from);
  MoveWindowRequest(MoveWindowRequest&& from) noexcept
    : MoveWindowRequest() {
    *this = ::std::move(from);
  }

  inline MoveWindowRequest& operator=(const MoveWindowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveWindowRequest& operator=(MoveWindowRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveWindowRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveWindowRequest* internal_default_instance() {
    return reinterpret_cast<const MoveWindowRequest*>(
               &_MoveWindowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MoveWindowRequest& a, MoveWindowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveWindowRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveWindowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveWindowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveWindowRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveWindowRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveWindowRequest& from) {
    MoveWindowRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveWindowRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.MoveWindowRequest";
  }
  protected:
  explicit MoveWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // int32 x = 3;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 4;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.MoveWindowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t hwnd_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class LockRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.LockRequest) */ {
 public:
  inline LockRequest() : LockRequest(nullptr) {}
  ~LockRequest() override;
  explicit PROTOBUF_CONSTEXPR LockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LockRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LockRequest& from) {
    LockRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.LockRequest";
  }
  protected:
  explicit LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kLockFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 lock = 2;
  void clear_lock();
  int32_t lock() const;
  void set_lock(int32_t value);
  private:
  int32_t _internal_lock() const;
  void _internal_set_lock(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.LockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t lock_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class IsBindRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.IsBindRequest) */ {
 public:
  inline IsBindRequest() : IsBindRequest(nullptr) {}
  ~IsBindRequest() override;
  explicit PROTOBUF_CONSTEXPR IsBindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsBindRequest(const IsBindRequest& from);
  IsBindRequest(IsBindRequest&& from) noexcept
    : IsBindRequest() {
    *this = ::std::move(from);
  }

  inline IsBindRequest& operator=(const IsBindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsBindRequest& operator=(IsBindRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsBindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsBindRequest* internal_default_instance() {
    return reinterpret_cast<const IsBindRequest*>(
               &_IsBindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IsBindRequest& a, IsBindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsBindRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsBindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsBindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsBindRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsBindRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsBindRequest& from) {
    IsBindRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsBindRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.IsBindRequest";
  }
  protected:
  explicit IsBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.IsBindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t hwnd_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class EnableBindRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.EnableBindRequest) */ {
 public:
  inline EnableBindRequest() : EnableBindRequest(nullptr) {}
  ~EnableBindRequest() override;
  explicit PROTOBUF_CONSTEXPR EnableBindRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableBindRequest(const EnableBindRequest& from);
  EnableBindRequest(EnableBindRequest&& from) noexcept
    : EnableBindRequest() {
    *this = ::std::move(from);
  }

  inline EnableBindRequest& operator=(const EnableBindRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableBindRequest& operator=(EnableBindRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnableBindRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableBindRequest* internal_default_instance() {
    return reinterpret_cast<const EnableBindRequest*>(
               &_EnableBindRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnableBindRequest& a, EnableBindRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableBindRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableBindRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableBindRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableBindRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnableBindRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EnableBindRequest& from) {
    EnableBindRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableBindRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.EnableBindRequest";
  }
  protected:
  explicit EnableBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 enable = 2;
  void clear_enable();
  int32_t enable() const;
  void set_enable(int32_t value);
  private:
  int32_t _internal_enable() const;
  void _internal_set_enable(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.EnableBindRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t enable_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class DownCpuRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.DownCpuRequest) */ {
 public:
  inline DownCpuRequest() : DownCpuRequest(nullptr) {}
  ~DownCpuRequest() override;
  explicit PROTOBUF_CONSTEXPR DownCpuRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DownCpuRequest(const DownCpuRequest& from);
  DownCpuRequest(DownCpuRequest&& from) noexcept
    : DownCpuRequest() {
    *this = ::std::move(from);
  }

  inline DownCpuRequest& operator=(const DownCpuRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DownCpuRequest& operator=(DownCpuRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DownCpuRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DownCpuRequest* internal_default_instance() {
    return reinterpret_cast<const DownCpuRequest*>(
               &_DownCpuRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DownCpuRequest& a, DownCpuRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DownCpuRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DownCpuRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DownCpuRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DownCpuRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DownCpuRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DownCpuRequest& from) {
    DownCpuRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownCpuRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.DownCpuRequest";
  }
  protected:
  explicit DownCpuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kTypeFieldNumber = 2,
    kRateFieldNumber = 3,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 rate = 3;
  void clear_rate();
  int32_t rate() const;
  void set_rate(int32_t value);
  private:
  int32_t _internal_rate() const;
  void _internal_set_rate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.DownCpuRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t type_;
    int32_t rate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class BindWindowExRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.BindWindowExRequest) */ {
 public:
  inline BindWindowExRequest() : BindWindowExRequest(nullptr) {}
  ~BindWindowExRequest() override;
  explicit PROTOBUF_CONSTEXPR BindWindowExRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BindWindowExRequest(const BindWindowExRequest& from);
  BindWindowExRequest(BindWindowExRequest&& from) noexcept
    : BindWindowExRequest() {
    *this = ::std::move(from);
  }

  inline BindWindowExRequest& operator=(const BindWindowExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BindWindowExRequest& operator=(BindWindowExRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BindWindowExRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BindWindowExRequest* internal_default_instance() {
    return reinterpret_cast<const BindWindowExRequest*>(
               &_BindWindowExRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BindWindowExRequest& a, BindWindowExRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BindWindowExRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BindWindowExRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BindWindowExRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BindWindowExRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BindWindowExRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BindWindowExRequest& from) {
    BindWindowExRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BindWindowExRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.BindWindowExRequest";
  }
  protected:
  explicit BindWindowExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayFieldNumber = 3,
    kMouseFieldNumber = 4,
    kKeypadFieldNumber = 5,
    kPublicFieldNumber = 6,
    kIndexFieldNumber = 1,
    kHwndFieldNumber = 2,
    kModeFieldNumber = 7,
  };
  // string display = 3;
  void clear_display();
  const std::string& display() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display();
  PROTOBUF_NODISCARD std::string* release_display();
  void set_allocated_display(std::string* display);
  private:
  const std::string& _internal_display() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display(const std::string& value);
  std::string* _internal_mutable_display();
  public:

  // string mouse = 4;
  void clear_mouse();
  const std::string& mouse() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mouse(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mouse();
  PROTOBUF_NODISCARD std::string* release_mouse();
  void set_allocated_mouse(std::string* mouse);
  private:
  const std::string& _internal_mouse() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mouse(const std::string& value);
  std::string* _internal_mutable_mouse();
  public:

  // string keypad = 5;
  void clear_keypad();
  const std::string& keypad() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keypad(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keypad();
  PROTOBUF_NODISCARD std::string* release_keypad();
  void set_allocated_keypad(std::string* keypad);
  private:
  const std::string& _internal_keypad() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keypad(const std::string& value);
  std::string* _internal_mutable_keypad();
  public:

  // string public_ = 6;
  void clear_public_();
  const std::string& public_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_();
  PROTOBUF_NODISCARD std::string* release_public_();
  void set_allocated_public_(std::string* public_);
  private:
  const std::string& _internal_public_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_(const std::string& value);
  std::string* _internal_mutable_public_();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 hwnd = 2;
  void clear_hwnd();
  int32_t hwnd() const;
  void set_hwnd(int32_t value);
  private:
  int32_t _internal_hwnd() const;
  void _internal_set_hwnd(int32_t value);
  public:

  // int32 mode = 7;
  void clear_mode();
  int32_t mode() const;
  void set_mode(int32_t value);
  private:
  int32_t _internal_mode() const;
  void _internal_set_mode(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.BindWindowExRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mouse_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keypad_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public__;
    int32_t index_;
    int32_t hwnd_;
    int32_t mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class StringRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.StringRequest) */ {
 public:
  inline StringRequest() : StringRequest(nullptr) {}
  ~StringRequest() override;
  explicit PROTOBUF_CONSTEXPR StringRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringRequest(const StringRequest& from);
  StringRequest(StringRequest&& from) noexcept
    : StringRequest() {
    *this = ::std::move(from);
  }

  inline StringRequest& operator=(const StringRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringRequest& operator=(StringRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringRequest* internal_default_instance() {
    return reinterpret_cast<const StringRequest*>(
               &_StringRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StringRequest& a, StringRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringRequest& from) {
    StringRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.StringRequest";
  }
  protected:
  explicit StringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // string path = 2;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.StringRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class RegRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.RegRequest) */ {
 public:
  inline RegRequest() : RegRequest(nullptr) {}
  ~RegRequest() override;
  explicit PROTOBUF_CONSTEXPR RegRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegRequest(const RegRequest& from);
  RegRequest(RegRequest&& from) noexcept
    : RegRequest() {
    *this = ::std::move(from);
  }

  inline RegRequest& operator=(const RegRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRequest& operator=(RegRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegRequest* internal_default_instance() {
    return reinterpret_cast<const RegRequest*>(
               &_RegRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RegRequest& a, RegRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegRequest& from) {
    RegRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.RegRequest";
  }
  protected:
  explicit RegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegCodeFieldNumber = 2,
    kVerInfoFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // string reg_code = 2;
  void clear_reg_code();
  const std::string& reg_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reg_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reg_code();
  PROTOBUF_NODISCARD std::string* release_reg_code();
  void set_allocated_reg_code(std::string* reg_code);
  private:
  const std::string& _internal_reg_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reg_code(const std::string& value);
  std::string* _internal_mutable_reg_code();
  public:

  // string ver_info = 3;
  void clear_ver_info();
  const std::string& ver_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ver_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ver_info();
  PROTOBUF_NODISCARD std::string* release_ver_info();
  void set_allocated_ver_info(std::string* ver_info);
  private:
  const std::string& _internal_ver_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ver_info(const std::string& value);
  std::string* _internal_mutable_ver_info();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.RegRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reg_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ver_info_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class FindPicRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.FindPicRequest) */ {
 public:
  inline FindPicRequest() : FindPicRequest(nullptr) {}
  ~FindPicRequest() override;
  explicit PROTOBUF_CONSTEXPR FindPicRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPicRequest(const FindPicRequest& from);
  FindPicRequest(FindPicRequest&& from) noexcept
    : FindPicRequest() {
    *this = ::std::move(from);
  }

  inline FindPicRequest& operator=(const FindPicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPicRequest& operator=(FindPicRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPicRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPicRequest* internal_default_instance() {
    return reinterpret_cast<const FindPicRequest*>(
               &_FindPicRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FindPicRequest& a, FindPicRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPicRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPicRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPicRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPicRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPicRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPicRequest& from) {
    FindPicRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPicRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.FindPicRequest";
  }
  protected:
  explicit FindPicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPicNameFieldNumber = 6,
    kDeltaColorFieldNumber = 7,
    kIndexFieldNumber = 1,
    kX1FieldNumber = 2,
    kY1FieldNumber = 3,
    kX2FieldNumber = 4,
    kY2FieldNumber = 5,
    kDirFieldNumber = 9,
    kSimFieldNumber = 8,
  };
  // string pic_name = 6;
  void clear_pic_name();
  const std::string& pic_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pic_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pic_name();
  PROTOBUF_NODISCARD std::string* release_pic_name();
  void set_allocated_pic_name(std::string* pic_name);
  private:
  const std::string& _internal_pic_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pic_name(const std::string& value);
  std::string* _internal_mutable_pic_name();
  public:

  // string delta_color = 7;
  void clear_delta_color();
  const std::string& delta_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_delta_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_delta_color();
  PROTOBUF_NODISCARD std::string* release_delta_color();
  void set_allocated_delta_color(std::string* delta_color);
  private:
  const std::string& _internal_delta_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta_color(const std::string& value);
  std::string* _internal_mutable_delta_color();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 x1 = 2;
  void clear_x1();
  int32_t x1() const;
  void set_x1(int32_t value);
  private:
  int32_t _internal_x1() const;
  void _internal_set_x1(int32_t value);
  public:

  // int32 y1 = 3;
  void clear_y1();
  int32_t y1() const;
  void set_y1(int32_t value);
  private:
  int32_t _internal_y1() const;
  void _internal_set_y1(int32_t value);
  public:

  // int32 x2 = 4;
  void clear_x2();
  int32_t x2() const;
  void set_x2(int32_t value);
  private:
  int32_t _internal_x2() const;
  void _internal_set_x2(int32_t value);
  public:

  // int32 y2 = 5;
  void clear_y2();
  int32_t y2() const;
  void set_y2(int32_t value);
  private:
  int32_t _internal_y2() const;
  void _internal_set_y2(int32_t value);
  public:

  // int32 dir = 9;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // double sim = 8;
  void clear_sim();
  double sim() const;
  void set_sim(double value);
  private:
  double _internal_sim() const;
  void _internal_set_sim(double value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.FindPicRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pic_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_color_;
    int32_t index_;
    int32_t x1_;
    int32_t y1_;
    int32_t x2_;
    int32_t y2_;
    int32_t dir_;
    double sim_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class FindPicResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.FindPicResponse) */ {
 public:
  inline FindPicResponse() : FindPicResponse(nullptr) {}
  ~FindPicResponse() override;
  explicit PROTOBUF_CONSTEXPR FindPicResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindPicResponse(const FindPicResponse& from);
  FindPicResponse(FindPicResponse&& from) noexcept
    : FindPicResponse() {
    *this = ::std::move(from);
  }

  inline FindPicResponse& operator=(const FindPicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindPicResponse& operator=(FindPicResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindPicResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindPicResponse* internal_default_instance() {
    return reinterpret_cast<const FindPicResponse*>(
               &_FindPicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FindPicResponse& a, FindPicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindPicResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindPicResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindPicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindPicResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindPicResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindPicResponse& from) {
    FindPicResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPicResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.FindPicResponse";
  }
  protected:
  explicit FindPicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOkFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 isOk = 1;
  void clear_isok();
  int32_t isok() const;
  void set_isok(int32_t value);
  private:
  int32_t _internal_isok() const;
  void _internal_set_isok(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.FindPicResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t isok_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class FindMultiColorExRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.FindMultiColorExRequest) */ {
 public:
  inline FindMultiColorExRequest() : FindMultiColorExRequest(nullptr) {}
  ~FindMultiColorExRequest() override;
  explicit PROTOBUF_CONSTEXPR FindMultiColorExRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindMultiColorExRequest(const FindMultiColorExRequest& from);
  FindMultiColorExRequest(FindMultiColorExRequest&& from) noexcept
    : FindMultiColorExRequest() {
    *this = ::std::move(from);
  }

  inline FindMultiColorExRequest& operator=(const FindMultiColorExRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindMultiColorExRequest& operator=(FindMultiColorExRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindMultiColorExRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindMultiColorExRequest* internal_default_instance() {
    return reinterpret_cast<const FindMultiColorExRequest*>(
               &_FindMultiColorExRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FindMultiColorExRequest& a, FindMultiColorExRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindMultiColorExRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindMultiColorExRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindMultiColorExRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindMultiColorExRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindMultiColorExRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindMultiColorExRequest& from) {
    FindMultiColorExRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindMultiColorExRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.FindMultiColorExRequest";
  }
  protected:
  explicit FindMultiColorExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstColorFieldNumber = 6,
    kOffsetColorFieldNumber = 7,
    kIndexFieldNumber = 1,
    kX1FieldNumber = 2,
    kY1FieldNumber = 3,
    kX2FieldNumber = 4,
    kY2FieldNumber = 5,
    kDirFieldNumber = 9,
    kSimFieldNumber = 8,
  };
  // string first_color = 6;
  void clear_first_color();
  const std::string& first_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_first_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_first_color();
  PROTOBUF_NODISCARD std::string* release_first_color();
  void set_allocated_first_color(std::string* first_color);
  private:
  const std::string& _internal_first_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_first_color(const std::string& value);
  std::string* _internal_mutable_first_color();
  public:

  // string offset_color = 7;
  void clear_offset_color();
  const std::string& offset_color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offset_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offset_color();
  PROTOBUF_NODISCARD std::string* release_offset_color();
  void set_allocated_offset_color(std::string* offset_color);
  private:
  const std::string& _internal_offset_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offset_color(const std::string& value);
  std::string* _internal_mutable_offset_color();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 x1 = 2;
  void clear_x1();
  int32_t x1() const;
  void set_x1(int32_t value);
  private:
  int32_t _internal_x1() const;
  void _internal_set_x1(int32_t value);
  public:

  // int32 y1 = 3;
  void clear_y1();
  int32_t y1() const;
  void set_y1(int32_t value);
  private:
  int32_t _internal_y1() const;
  void _internal_set_y1(int32_t value);
  public:

  // int32 x2 = 4;
  void clear_x2();
  int32_t x2() const;
  void set_x2(int32_t value);
  private:
  int32_t _internal_x2() const;
  void _internal_set_x2(int32_t value);
  public:

  // int32 y2 = 5;
  void clear_y2();
  int32_t y2() const;
  void set_y2(int32_t value);
  private:
  int32_t _internal_y2() const;
  void _internal_set_y2(int32_t value);
  public:

  // int32 dir = 9;
  void clear_dir();
  int32_t dir() const;
  void set_dir(int32_t value);
  private:
  int32_t _internal_dir() const;
  void _internal_set_dir(int32_t value);
  public:

  // double sim = 8;
  void clear_sim();
  double sim() const;
  void set_sim(double value);
  private:
  double _internal_sim() const;
  void _internal_set_sim(double value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.FindMultiColorExRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_color_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offset_color_;
    int32_t index_;
    int32_t x1_;
    int32_t y1_;
    int32_t x2_;
    int32_t y2_;
    int32_t dir_;
    double sim_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class FindMultiColorResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.FindMultiColorResponse) */ {
 public:
  inline FindMultiColorResponse() : FindMultiColorResponse(nullptr) {}
  ~FindMultiColorResponse() override;
  explicit PROTOBUF_CONSTEXPR FindMultiColorResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindMultiColorResponse(const FindMultiColorResponse& from);
  FindMultiColorResponse(FindMultiColorResponse&& from) noexcept
    : FindMultiColorResponse() {
    *this = ::std::move(from);
  }

  inline FindMultiColorResponse& operator=(const FindMultiColorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindMultiColorResponse& operator=(FindMultiColorResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindMultiColorResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindMultiColorResponse* internal_default_instance() {
    return reinterpret_cast<const FindMultiColorResponse*>(
               &_FindMultiColorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FindMultiColorResponse& a, FindMultiColorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FindMultiColorResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindMultiColorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindMultiColorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindMultiColorResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindMultiColorResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindMultiColorResponse& from) {
    FindMultiColorResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindMultiColorResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.FindMultiColorResponse";
  }
  protected:
  explicit FindMultiColorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOkFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 isOk = 1;
  void clear_isok();
  int32_t isok() const;
  void set_isok(int32_t value);
  private:
  int32_t _internal_isok() const;
  void _internal_set_isok(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.FindMultiColorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t isok_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class FindMultiColorRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.FindMultiColorRequest) */ {
 public:
  inline FindMultiColorRequest() : FindMultiColorRequest(nullptr) {}
  ~FindMultiColorRequest() override;
  explicit PROTOBUF_CONSTEXPR FindMultiColorRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FindMultiColorRequest(const FindMultiColorRequest& from);
  FindMultiColorRequest(FindMultiColorRequest&& from) noexcept
    : FindMultiColorRequest() {
    *this = ::std::move(from);
  }

  inline FindMultiColorRequest& operator=(const FindMultiColorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindMultiColorRequest& operator=(FindMultiColorRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FindMultiColorRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FindMultiColorRequest* internal_default_instance() {
    return reinterpret_cast<const FindMultiColorRequest*>(
               &_FindMultiColorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FindMultiColorRequest& a, FindMultiColorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FindMultiColorRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FindMultiColorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FindMultiColorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FindMultiColorRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FindMultiColorRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FindMultiColorRequest& from) {
    FindMultiColorRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindMultiColorRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.FindMultiColorRequest";
  }
  protected:
  explicit FindMultiColorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 6,
    kIndexFieldNumber = 1,
    kX1FieldNumber = 2,
    kY1FieldNumber = 3,
    kX2FieldNumber = 4,
    kSimFieldNumber = 7,
    kY2FieldNumber = 5,
  };
  // string color = 6;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 x1 = 2;
  void clear_x1();
  int32_t x1() const;
  void set_x1(int32_t value);
  private:
  int32_t _internal_x1() const;
  void _internal_set_x1(int32_t value);
  public:

  // int32 y1 = 3;
  void clear_y1();
  int32_t y1() const;
  void set_y1(int32_t value);
  private:
  int32_t _internal_y1() const;
  void _internal_set_y1(int32_t value);
  public:

  // int32 x2 = 4;
  void clear_x2();
  int32_t x2() const;
  void set_x2(int32_t value);
  private:
  int32_t _internal_x2() const;
  void _internal_set_x2(int32_t value);
  public:

  // double sim = 7;
  void clear_sim();
  double sim() const;
  void set_sim(double value);
  private:
  double _internal_sim() const;
  void _internal_set_sim(double value);
  public:

  // int32 y2 = 5;
  void clear_y2();
  int32_t y2() const;
  void set_y2(int32_t value);
  private:
  int32_t _internal_y2() const;
  void _internal_set_y2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.FindMultiColorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    int32_t index_;
    int32_t x1_;
    int32_t y1_;
    int32_t x2_;
    double sim_;
    int32_t y2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class RectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.RectRequest) */ {
 public:
  inline RectRequest() : RectRequest(nullptr) {}
  ~RectRequest() override;
  explicit PROTOBUF_CONSTEXPR RectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectRequest(const RectRequest& from);
  RectRequest(RectRequest&& from) noexcept
    : RectRequest() {
    *this = ::std::move(from);
  }

  inline RectRequest& operator=(const RectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectRequest& operator=(RectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectRequest* internal_default_instance() {
    return reinterpret_cast<const RectRequest*>(
               &_RectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(RectRequest& a, RectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RectRequest& from) {
    RectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.RectRequest";
  }
  protected:
  explicit RectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kWFieldNumber = 4,
    kHFieldNumber = 5,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // int32 w = 4;
  void clear_w();
  int32_t w() const;
  void set_w(int32_t value);
  private:
  int32_t _internal_w() const;
  void _internal_set_w(int32_t value);
  public:

  // int32 h = 5;
  void clear_h();
  int32_t h() const;
  void set_h(int32_t value);
  private:
  int32_t _internal_h() const;
  void _internal_set_h(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.RectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t x_;
    int32_t y_;
    int32_t w_;
    int32_t h_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class StringResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.StringResponse) */ {
 public:
  inline StringResponse() : StringResponse(nullptr) {}
  ~StringResponse() override;
  explicit PROTOBUF_CONSTEXPR StringResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringResponse(const StringResponse& from);
  StringResponse(StringResponse&& from) noexcept
    : StringResponse() {
    *this = ::std::move(from);
  }

  inline StringResponse& operator=(const StringResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringResponse& operator=(StringResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StringResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringResponse* internal_default_instance() {
    return reinterpret_cast<const StringResponse*>(
               &_StringResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StringResponse& a, StringResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StringResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StringResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StringResponse& from) {
    StringResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.StringResponse";
  }
  protected:
  explicit StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 2,
  };
  // string str = 2;
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.StringResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class PointRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.PointRequest) */ {
 public:
  inline PointRequest() : PointRequest(nullptr) {}
  ~PointRequest() override;
  explicit PROTOBUF_CONSTEXPR PointRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointRequest(const PointRequest& from);
  PointRequest(PointRequest&& from) noexcept
    : PointRequest() {
    *this = ::std::move(from);
  }

  inline PointRequest& operator=(const PointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointRequest& operator=(PointRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointRequest* internal_default_instance() {
    return reinterpret_cast<const PointRequest*>(
               &_PointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PointRequest& a, PointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PointRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointRequest& from) {
    PointRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.PointRequest";
  }
  protected:
  explicit PointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 x = 2;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 3;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.PointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class PointResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.PointResponse) */ {
 public:
  inline PointResponse() : PointResponse(nullptr) {}
  ~PointResponse() override;
  explicit PROTOBUF_CONSTEXPR PointResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointResponse(const PointResponse& from);
  PointResponse(PointResponse&& from) noexcept
    : PointResponse() {
    *this = ::std::move(from);
  }

  inline PointResponse& operator=(const PointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointResponse& operator=(PointResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointResponse* internal_default_instance() {
    return reinterpret_cast<const PointResponse*>(
               &_PointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PointResponse& a, PointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PointResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PointResponse& from) {
    PointResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.PointResponse";
  }
  protected:
  explicit PointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // int32 y = 2;
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.PointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t x_;
    int32_t y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class IndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.IndexRequest) */ {
 public:
  inline IndexRequest() : IndexRequest(nullptr) {}
  ~IndexRequest() override;
  explicit PROTOBUF_CONSTEXPR IndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IndexRequest(const IndexRequest& from);
  IndexRequest(IndexRequest&& from) noexcept
    : IndexRequest() {
    *this = ::std::move(from);
  }

  inline IndexRequest& operator=(const IndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRequest& operator=(IndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndexRequest* internal_default_instance() {
    return reinterpret_cast<const IndexRequest*>(
               &_IndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(IndexRequest& a, IndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IndexRequest& from) {
    IndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.IndexRequest";
  }
  protected:
  explicit IndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.IndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class IsOkResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.IsOkResponse) */ {
 public:
  inline IsOkResponse() : IsOkResponse(nullptr) {}
  ~IsOkResponse() override;
  explicit PROTOBUF_CONSTEXPR IsOkResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsOkResponse(const IsOkResponse& from);
  IsOkResponse(IsOkResponse&& from) noexcept
    : IsOkResponse() {
    *this = ::std::move(from);
  }

  inline IsOkResponse& operator=(const IsOkResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOkResponse& operator=(IsOkResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsOkResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsOkResponse* internal_default_instance() {
    return reinterpret_cast<const IsOkResponse*>(
               &_IsOkResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(IsOkResponse& a, IsOkResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOkResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsOkResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsOkResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsOkResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsOkResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsOkResponse& from) {
    IsOkResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOkResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.IsOkResponse";
  }
  protected:
  explicit IsOkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOkFieldNumber = 1,
  };
  // int32 isOk = 1;
  void clear_isok();
  int32_t isok() const;
  void set_isok(int32_t value);
  private:
  int32_t _internal_isok() const;
  void _internal_set_isok(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.IsOkResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t isok_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class KeyUpRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.KeyUpRequest) */ {
 public:
  inline KeyUpRequest() : KeyUpRequest(nullptr) {}
  ~KeyUpRequest() override;
  explicit PROTOBUF_CONSTEXPR KeyUpRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyUpRequest(const KeyUpRequest& from);
  KeyUpRequest(KeyUpRequest&& from) noexcept
    : KeyUpRequest() {
    *this = ::std::move(from);
  }

  inline KeyUpRequest& operator=(const KeyUpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyUpRequest& operator=(KeyUpRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyUpRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyUpRequest* internal_default_instance() {
    return reinterpret_cast<const KeyUpRequest*>(
               &_KeyUpRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(KeyUpRequest& a, KeyUpRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyUpRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyUpRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyUpRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyUpRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyUpRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyUpRequest& from) {
    KeyUpRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyUpRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.KeyUpRequest";
  }
  protected:
  explicit KeyUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kVkCodeFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 vk_code = 2;
  void clear_vk_code();
  int32_t vk_code() const;
  void set_vk_code(int32_t value);
  private:
  int32_t _internal_vk_code() const;
  void _internal_set_vk_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.KeyUpRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t vk_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class VerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.VerResponse) */ {
 public:
  inline VerResponse() : VerResponse(nullptr) {}
  ~VerResponse() override;
  explicit PROTOBUF_CONSTEXPR VerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerResponse(const VerResponse& from);
  VerResponse(VerResponse&& from) noexcept
    : VerResponse() {
    *this = ::std::move(from);
  }

  inline VerResponse& operator=(const VerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerResponse& operator=(VerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerResponse* internal_default_instance() {
    return reinterpret_cast<const VerResponse*>(
               &_VerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(VerResponse& a, VerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerResponse& from) {
    VerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.VerResponse";
  }
  protected:
  explicit VerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
  };
  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.VerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class KeyDownRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.KeyDownRequest) */ {
 public:
  inline KeyDownRequest() : KeyDownRequest(nullptr) {}
  ~KeyDownRequest() override;
  explicit PROTOBUF_CONSTEXPR KeyDownRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDownRequest(const KeyDownRequest& from);
  KeyDownRequest(KeyDownRequest&& from) noexcept
    : KeyDownRequest() {
    *this = ::std::move(from);
  }

  inline KeyDownRequest& operator=(const KeyDownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDownRequest& operator=(KeyDownRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyDownRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDownRequest* internal_default_instance() {
    return reinterpret_cast<const KeyDownRequest*>(
               &_KeyDownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(KeyDownRequest& a, KeyDownRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDownRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDownRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyDownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyDownRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyDownRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyDownRequest& from) {
    KeyDownRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDownRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.KeyDownRequest";
  }
  protected:
  explicit KeyDownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kVkCodeFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 vk_code = 2;
  void clear_vk_code();
  int32_t vk_code() const;
  void set_vk_code(int32_t value);
  private:
  int32_t _internal_vk_code() const;
  void _internal_set_vk_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.KeyDownRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t vk_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class KeyDownCharRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.KeyDownCharRequest) */ {
 public:
  inline KeyDownCharRequest() : KeyDownCharRequest(nullptr) {}
  ~KeyDownCharRequest() override;
  explicit PROTOBUF_CONSTEXPR KeyDownCharRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDownCharRequest(const KeyDownCharRequest& from);
  KeyDownCharRequest(KeyDownCharRequest&& from) noexcept
    : KeyDownCharRequest() {
    *this = ::std::move(from);
  }

  inline KeyDownCharRequest& operator=(const KeyDownCharRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDownCharRequest& operator=(KeyDownCharRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyDownCharRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDownCharRequest* internal_default_instance() {
    return reinterpret_cast<const KeyDownCharRequest*>(
               &_KeyDownCharRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(KeyDownCharRequest& a, KeyDownCharRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDownCharRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDownCharRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyDownCharRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyDownCharRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyDownCharRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyDownCharRequest& from) {
    KeyDownCharRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDownCharRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.KeyDownCharRequest";
  }
  protected:
  explicit KeyDownCharRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyStrFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // string key_str = 2;
  void clear_key_str();
  const std::string& key_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key_str();
  PROTOBUF_NODISCARD std::string* release_key_str();
  void set_allocated_key_str(std::string* key_str);
  private:
  const std::string& _internal_key_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_str(const std::string& value);
  std::string* _internal_mutable_key_str();
  public:

  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.KeyDownCharRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_str_;
    int32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// -------------------------------------------------------------------

class KeyPressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dmsoftRpc.KeyPressRequest) */ {
 public:
  inline KeyPressRequest() : KeyPressRequest(nullptr) {}
  ~KeyPressRequest() override;
  explicit PROTOBUF_CONSTEXPR KeyPressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPressRequest(const KeyPressRequest& from);
  KeyPressRequest(KeyPressRequest&& from) noexcept
    : KeyPressRequest() {
    *this = ::std::move(from);
  }

  inline KeyPressRequest& operator=(const KeyPressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPressRequest& operator=(KeyPressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyPressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPressRequest* internal_default_instance() {
    return reinterpret_cast<const KeyPressRequest*>(
               &_KeyPressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(KeyPressRequest& a, KeyPressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyPressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyPressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KeyPressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const KeyPressRequest& from) {
    KeyPressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dmsoftRpc.KeyPressRequest";
  }
  protected:
  explicit KeyPressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kVkCodeFieldNumber = 2,
  };
  // int32 index = 1;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 vk_code = 2;
  void clear_vk_code();
  int32_t vk_code() const;
  void set_vk_code(int32_t value);
  private:
  int32_t _internal_vk_code() const;
  void _internal_set_vk_code(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:dmsoftRpc.KeyPressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t index_;
    int32_t vk_code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_dmsoft_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetDmIndexResponse

// int32 index = 1;
inline void GetDmIndexResponse::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t GetDmIndexResponse::_internal_index() const {
  return _impl_.index_;
}
inline int32_t GetDmIndexResponse::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.GetDmIndexResponse.index)
  return _internal_index();
}
inline void GetDmIndexResponse::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void GetDmIndexResponse::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.GetDmIndexResponse.index)
}

// -------------------------------------------------------------------

// SetWindowTextRequest

// int32 index = 1;
inline void SetWindowTextRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t SetWindowTextRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t SetWindowTextRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowTextRequest.index)
  return _internal_index();
}
inline void SetWindowTextRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void SetWindowTextRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowTextRequest.index)
}

// int32 hwnd = 2;
inline void SetWindowTextRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t SetWindowTextRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t SetWindowTextRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowTextRequest.hwnd)
  return _internal_hwnd();
}
inline void SetWindowTextRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void SetWindowTextRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowTextRequest.hwnd)
}

// string title = 3;
inline void SetWindowTextRequest::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& SetWindowTextRequest::title() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowTextRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetWindowTextRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowTextRequest.title)
}
inline std::string* SetWindowTextRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.SetWindowTextRequest.title)
  return _s;
}
inline const std::string& SetWindowTextRequest::_internal_title() const {
  return _impl_.title_.Get();
}
inline void SetWindowTextRequest::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* SetWindowTextRequest::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* SetWindowTextRequest::release_title() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.SetWindowTextRequest.title)
  return _impl_.title_.Release();
}
inline void SetWindowTextRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.SetWindowTextRequest.title)
}

// -------------------------------------------------------------------

// SetWindowSizeRequest

// int32 index = 1;
inline void SetWindowSizeRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t SetWindowSizeRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t SetWindowSizeRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowSizeRequest.index)
  return _internal_index();
}
inline void SetWindowSizeRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void SetWindowSizeRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowSizeRequest.index)
}

// int32 hwnd = 2;
inline void SetWindowSizeRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t SetWindowSizeRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t SetWindowSizeRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowSizeRequest.hwnd)
  return _internal_hwnd();
}
inline void SetWindowSizeRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void SetWindowSizeRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowSizeRequest.hwnd)
}

// int32 width = 3;
inline void SetWindowSizeRequest::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t SetWindowSizeRequest::_internal_width() const {
  return _impl_.width_;
}
inline int32_t SetWindowSizeRequest::width() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowSizeRequest.width)
  return _internal_width();
}
inline void SetWindowSizeRequest::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void SetWindowSizeRequest::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowSizeRequest.width)
}

// int32 height = 4;
inline void SetWindowSizeRequest::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t SetWindowSizeRequest::_internal_height() const {
  return _impl_.height_;
}
inline int32_t SetWindowSizeRequest::height() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetWindowSizeRequest.height)
  return _internal_height();
}
inline void SetWindowSizeRequest::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void SetWindowSizeRequest::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetWindowSizeRequest.height)
}

// -------------------------------------------------------------------

// SetClientSizeRequest

// int32 index = 1;
inline void SetClientSizeRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t SetClientSizeRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t SetClientSizeRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetClientSizeRequest.index)
  return _internal_index();
}
inline void SetClientSizeRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void SetClientSizeRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetClientSizeRequest.index)
}

// int32 hwnd = 2;
inline void SetClientSizeRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t SetClientSizeRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t SetClientSizeRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetClientSizeRequest.hwnd)
  return _internal_hwnd();
}
inline void SetClientSizeRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void SetClientSizeRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetClientSizeRequest.hwnd)
}

// int32 width = 3;
inline void SetClientSizeRequest::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t SetClientSizeRequest::_internal_width() const {
  return _impl_.width_;
}
inline int32_t SetClientSizeRequest::width() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetClientSizeRequest.width)
  return _internal_width();
}
inline void SetClientSizeRequest::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void SetClientSizeRequest::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetClientSizeRequest.width)
}

// int32 height = 4;
inline void SetClientSizeRequest::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t SetClientSizeRequest::_internal_height() const {
  return _impl_.height_;
}
inline int32_t SetClientSizeRequest::height() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.SetClientSizeRequest.height)
  return _internal_height();
}
inline void SetClientSizeRequest::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void SetClientSizeRequest::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.SetClientSizeRequest.height)
}

// -------------------------------------------------------------------

// MoveWindowRequest

// int32 index = 1;
inline void MoveWindowRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t MoveWindowRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t MoveWindowRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.MoveWindowRequest.index)
  return _internal_index();
}
inline void MoveWindowRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void MoveWindowRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.MoveWindowRequest.index)
}

// int32 hwnd = 2;
inline void MoveWindowRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t MoveWindowRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t MoveWindowRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.MoveWindowRequest.hwnd)
  return _internal_hwnd();
}
inline void MoveWindowRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void MoveWindowRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.MoveWindowRequest.hwnd)
}

// int32 x = 3;
inline void MoveWindowRequest::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t MoveWindowRequest::_internal_x() const {
  return _impl_.x_;
}
inline int32_t MoveWindowRequest::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.MoveWindowRequest.x)
  return _internal_x();
}
inline void MoveWindowRequest::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void MoveWindowRequest::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.MoveWindowRequest.x)
}

// int32 y = 4;
inline void MoveWindowRequest::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t MoveWindowRequest::_internal_y() const {
  return _impl_.y_;
}
inline int32_t MoveWindowRequest::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.MoveWindowRequest.y)
  return _internal_y();
}
inline void MoveWindowRequest::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void MoveWindowRequest::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.MoveWindowRequest.y)
}

// -------------------------------------------------------------------

// LockRequest

// int32 index = 1;
inline void LockRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t LockRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t LockRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.LockRequest.index)
  return _internal_index();
}
inline void LockRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void LockRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.LockRequest.index)
}

// int32 lock = 2;
inline void LockRequest::clear_lock() {
  _impl_.lock_ = 0;
}
inline int32_t LockRequest::_internal_lock() const {
  return _impl_.lock_;
}
inline int32_t LockRequest::lock() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.LockRequest.lock)
  return _internal_lock();
}
inline void LockRequest::_internal_set_lock(int32_t value) {
  
  _impl_.lock_ = value;
}
inline void LockRequest::set_lock(int32_t value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.LockRequest.lock)
}

// -------------------------------------------------------------------

// IsBindRequest

// int32 index = 1;
inline void IsBindRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t IsBindRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t IsBindRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.IsBindRequest.index)
  return _internal_index();
}
inline void IsBindRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void IsBindRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.IsBindRequest.index)
}

// int32 hwnd = 2;
inline void IsBindRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t IsBindRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t IsBindRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.IsBindRequest.hwnd)
  return _internal_hwnd();
}
inline void IsBindRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void IsBindRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.IsBindRequest.hwnd)
}

// -------------------------------------------------------------------

// EnableBindRequest

// int32 index = 1;
inline void EnableBindRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t EnableBindRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t EnableBindRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.EnableBindRequest.index)
  return _internal_index();
}
inline void EnableBindRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void EnableBindRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.EnableBindRequest.index)
}

// int32 enable = 2;
inline void EnableBindRequest::clear_enable() {
  _impl_.enable_ = 0;
}
inline int32_t EnableBindRequest::_internal_enable() const {
  return _impl_.enable_;
}
inline int32_t EnableBindRequest::enable() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.EnableBindRequest.enable)
  return _internal_enable();
}
inline void EnableBindRequest::_internal_set_enable(int32_t value) {
  
  _impl_.enable_ = value;
}
inline void EnableBindRequest::set_enable(int32_t value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.EnableBindRequest.enable)
}

// -------------------------------------------------------------------

// DownCpuRequest

// int32 index = 1;
inline void DownCpuRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t DownCpuRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t DownCpuRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.DownCpuRequest.index)
  return _internal_index();
}
inline void DownCpuRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void DownCpuRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.DownCpuRequest.index)
}

// int32 type = 2;
inline void DownCpuRequest::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t DownCpuRequest::_internal_type() const {
  return _impl_.type_;
}
inline int32_t DownCpuRequest::type() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.DownCpuRequest.type)
  return _internal_type();
}
inline void DownCpuRequest::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void DownCpuRequest::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.DownCpuRequest.type)
}

// int32 rate = 3;
inline void DownCpuRequest::clear_rate() {
  _impl_.rate_ = 0;
}
inline int32_t DownCpuRequest::_internal_rate() const {
  return _impl_.rate_;
}
inline int32_t DownCpuRequest::rate() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.DownCpuRequest.rate)
  return _internal_rate();
}
inline void DownCpuRequest::_internal_set_rate(int32_t value) {
  
  _impl_.rate_ = value;
}
inline void DownCpuRequest::set_rate(int32_t value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.DownCpuRequest.rate)
}

// -------------------------------------------------------------------

// BindWindowExRequest

// int32 index = 1;
inline void BindWindowExRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t BindWindowExRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t BindWindowExRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.index)
  return _internal_index();
}
inline void BindWindowExRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void BindWindowExRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.index)
}

// int32 hwnd = 2;
inline void BindWindowExRequest::clear_hwnd() {
  _impl_.hwnd_ = 0;
}
inline int32_t BindWindowExRequest::_internal_hwnd() const {
  return _impl_.hwnd_;
}
inline int32_t BindWindowExRequest::hwnd() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.hwnd)
  return _internal_hwnd();
}
inline void BindWindowExRequest::_internal_set_hwnd(int32_t value) {
  
  _impl_.hwnd_ = value;
}
inline void BindWindowExRequest::set_hwnd(int32_t value) {
  _internal_set_hwnd(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.hwnd)
}

// string display = 3;
inline void BindWindowExRequest::clear_display() {
  _impl_.display_.ClearToEmpty();
}
inline const std::string& BindWindowExRequest::display() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.display)
  return _internal_display();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindWindowExRequest::set_display(ArgT0&& arg0, ArgT... args) {
 
 _impl_.display_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.display)
}
inline std::string* BindWindowExRequest::mutable_display() {
  std::string* _s = _internal_mutable_display();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.BindWindowExRequest.display)
  return _s;
}
inline const std::string& BindWindowExRequest::_internal_display() const {
  return _impl_.display_.Get();
}
inline void BindWindowExRequest::_internal_set_display(const std::string& value) {
  
  _impl_.display_.Set(value, GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::_internal_mutable_display() {
  
  return _impl_.display_.Mutable(GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::release_display() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.BindWindowExRequest.display)
  return _impl_.display_.Release();
}
inline void BindWindowExRequest::set_allocated_display(std::string* display) {
  if (display != nullptr) {
    
  } else {
    
  }
  _impl_.display_.SetAllocated(display, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.display_.IsDefault()) {
    _impl_.display_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.BindWindowExRequest.display)
}

// string mouse = 4;
inline void BindWindowExRequest::clear_mouse() {
  _impl_.mouse_.ClearToEmpty();
}
inline const std::string& BindWindowExRequest::mouse() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.mouse)
  return _internal_mouse();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindWindowExRequest::set_mouse(ArgT0&& arg0, ArgT... args) {
 
 _impl_.mouse_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.mouse)
}
inline std::string* BindWindowExRequest::mutable_mouse() {
  std::string* _s = _internal_mutable_mouse();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.BindWindowExRequest.mouse)
  return _s;
}
inline const std::string& BindWindowExRequest::_internal_mouse() const {
  return _impl_.mouse_.Get();
}
inline void BindWindowExRequest::_internal_set_mouse(const std::string& value) {
  
  _impl_.mouse_.Set(value, GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::_internal_mutable_mouse() {
  
  return _impl_.mouse_.Mutable(GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::release_mouse() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.BindWindowExRequest.mouse)
  return _impl_.mouse_.Release();
}
inline void BindWindowExRequest::set_allocated_mouse(std::string* mouse) {
  if (mouse != nullptr) {
    
  } else {
    
  }
  _impl_.mouse_.SetAllocated(mouse, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.mouse_.IsDefault()) {
    _impl_.mouse_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.BindWindowExRequest.mouse)
}

// string keypad = 5;
inline void BindWindowExRequest::clear_keypad() {
  _impl_.keypad_.ClearToEmpty();
}
inline const std::string& BindWindowExRequest::keypad() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.keypad)
  return _internal_keypad();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindWindowExRequest::set_keypad(ArgT0&& arg0, ArgT... args) {
 
 _impl_.keypad_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.keypad)
}
inline std::string* BindWindowExRequest::mutable_keypad() {
  std::string* _s = _internal_mutable_keypad();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.BindWindowExRequest.keypad)
  return _s;
}
inline const std::string& BindWindowExRequest::_internal_keypad() const {
  return _impl_.keypad_.Get();
}
inline void BindWindowExRequest::_internal_set_keypad(const std::string& value) {
  
  _impl_.keypad_.Set(value, GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::_internal_mutable_keypad() {
  
  return _impl_.keypad_.Mutable(GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::release_keypad() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.BindWindowExRequest.keypad)
  return _impl_.keypad_.Release();
}
inline void BindWindowExRequest::set_allocated_keypad(std::string* keypad) {
  if (keypad != nullptr) {
    
  } else {
    
  }
  _impl_.keypad_.SetAllocated(keypad, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.keypad_.IsDefault()) {
    _impl_.keypad_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.BindWindowExRequest.keypad)
}

// string public_ = 6;
inline void BindWindowExRequest::clear_public_() {
  _impl_.public__.ClearToEmpty();
}
inline const std::string& BindWindowExRequest::public_() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.public_)
  return _internal_public_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BindWindowExRequest::set_public_(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.public_)
}
inline std::string* BindWindowExRequest::mutable_public_() {
  std::string* _s = _internal_mutable_public_();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.BindWindowExRequest.public_)
  return _s;
}
inline const std::string& BindWindowExRequest::_internal_public_() const {
  return _impl_.public__.Get();
}
inline void BindWindowExRequest::_internal_set_public_(const std::string& value) {
  
  _impl_.public__.Set(value, GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::_internal_mutable_public_() {
  
  return _impl_.public__.Mutable(GetArenaForAllocation());
}
inline std::string* BindWindowExRequest::release_public_() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.BindWindowExRequest.public_)
  return _impl_.public__.Release();
}
inline void BindWindowExRequest::set_allocated_public_(std::string* public_) {
  if (public_ != nullptr) {
    
  } else {
    
  }
  _impl_.public__.SetAllocated(public_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public__.IsDefault()) {
    _impl_.public__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.BindWindowExRequest.public_)
}

// int32 mode = 7;
inline void BindWindowExRequest::clear_mode() {
  _impl_.mode_ = 0;
}
inline int32_t BindWindowExRequest::_internal_mode() const {
  return _impl_.mode_;
}
inline int32_t BindWindowExRequest::mode() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.BindWindowExRequest.mode)
  return _internal_mode();
}
inline void BindWindowExRequest::_internal_set_mode(int32_t value) {
  
  _impl_.mode_ = value;
}
inline void BindWindowExRequest::set_mode(int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.BindWindowExRequest.mode)
}

// -------------------------------------------------------------------

// StringRequest

// int32 index = 1;
inline void StringRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t StringRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t StringRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.StringRequest.index)
  return _internal_index();
}
inline void StringRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void StringRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.StringRequest.index)
}

// string path = 2;
inline void StringRequest::clear_path() {
  _impl_.path_.ClearToEmpty();
}
inline const std::string& StringRequest::path() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.StringRequest.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringRequest::set_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.StringRequest.path)
}
inline std::string* StringRequest::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.StringRequest.path)
  return _s;
}
inline const std::string& StringRequest::_internal_path() const {
  return _impl_.path_.Get();
}
inline void StringRequest::_internal_set_path(const std::string& value) {
  
  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* StringRequest::_internal_mutable_path() {
  
  return _impl_.path_.Mutable(GetArenaForAllocation());
}
inline std::string* StringRequest::release_path() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.StringRequest.path)
  return _impl_.path_.Release();
}
inline void StringRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  _impl_.path_.SetAllocated(path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_.IsDefault()) {
    _impl_.path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.StringRequest.path)
}

// -------------------------------------------------------------------

// RegRequest

// int32 index = 1;
inline void RegRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t RegRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t RegRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RegRequest.index)
  return _internal_index();
}
inline void RegRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void RegRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RegRequest.index)
}

// string reg_code = 2;
inline void RegRequest::clear_reg_code() {
  _impl_.reg_code_.ClearToEmpty();
}
inline const std::string& RegRequest::reg_code() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RegRequest.reg_code)
  return _internal_reg_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegRequest::set_reg_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reg_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.RegRequest.reg_code)
}
inline std::string* RegRequest::mutable_reg_code() {
  std::string* _s = _internal_mutable_reg_code();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.RegRequest.reg_code)
  return _s;
}
inline const std::string& RegRequest::_internal_reg_code() const {
  return _impl_.reg_code_.Get();
}
inline void RegRequest::_internal_set_reg_code(const std::string& value) {
  
  _impl_.reg_code_.Set(value, GetArenaForAllocation());
}
inline std::string* RegRequest::_internal_mutable_reg_code() {
  
  return _impl_.reg_code_.Mutable(GetArenaForAllocation());
}
inline std::string* RegRequest::release_reg_code() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.RegRequest.reg_code)
  return _impl_.reg_code_.Release();
}
inline void RegRequest::set_allocated_reg_code(std::string* reg_code) {
  if (reg_code != nullptr) {
    
  } else {
    
  }
  _impl_.reg_code_.SetAllocated(reg_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reg_code_.IsDefault()) {
    _impl_.reg_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.RegRequest.reg_code)
}

// string ver_info = 3;
inline void RegRequest::clear_ver_info() {
  _impl_.ver_info_.ClearToEmpty();
}
inline const std::string& RegRequest::ver_info() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RegRequest.ver_info)
  return _internal_ver_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegRequest::set_ver_info(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ver_info_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.RegRequest.ver_info)
}
inline std::string* RegRequest::mutable_ver_info() {
  std::string* _s = _internal_mutable_ver_info();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.RegRequest.ver_info)
  return _s;
}
inline const std::string& RegRequest::_internal_ver_info() const {
  return _impl_.ver_info_.Get();
}
inline void RegRequest::_internal_set_ver_info(const std::string& value) {
  
  _impl_.ver_info_.Set(value, GetArenaForAllocation());
}
inline std::string* RegRequest::_internal_mutable_ver_info() {
  
  return _impl_.ver_info_.Mutable(GetArenaForAllocation());
}
inline std::string* RegRequest::release_ver_info() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.RegRequest.ver_info)
  return _impl_.ver_info_.Release();
}
inline void RegRequest::set_allocated_ver_info(std::string* ver_info) {
  if (ver_info != nullptr) {
    
  } else {
    
  }
  _impl_.ver_info_.SetAllocated(ver_info, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ver_info_.IsDefault()) {
    _impl_.ver_info_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.RegRequest.ver_info)
}

// -------------------------------------------------------------------

// FindPicRequest

// int32 index = 1;
inline void FindPicRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t FindPicRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t FindPicRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.index)
  return _internal_index();
}
inline void FindPicRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void FindPicRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.index)
}

// int32 x1 = 2;
inline void FindPicRequest::clear_x1() {
  _impl_.x1_ = 0;
}
inline int32_t FindPicRequest::_internal_x1() const {
  return _impl_.x1_;
}
inline int32_t FindPicRequest::x1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.x1)
  return _internal_x1();
}
inline void FindPicRequest::_internal_set_x1(int32_t value) {
  
  _impl_.x1_ = value;
}
inline void FindPicRequest::set_x1(int32_t value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.x1)
}

// int32 y1 = 3;
inline void FindPicRequest::clear_y1() {
  _impl_.y1_ = 0;
}
inline int32_t FindPicRequest::_internal_y1() const {
  return _impl_.y1_;
}
inline int32_t FindPicRequest::y1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.y1)
  return _internal_y1();
}
inline void FindPicRequest::_internal_set_y1(int32_t value) {
  
  _impl_.y1_ = value;
}
inline void FindPicRequest::set_y1(int32_t value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.y1)
}

// int32 x2 = 4;
inline void FindPicRequest::clear_x2() {
  _impl_.x2_ = 0;
}
inline int32_t FindPicRequest::_internal_x2() const {
  return _impl_.x2_;
}
inline int32_t FindPicRequest::x2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.x2)
  return _internal_x2();
}
inline void FindPicRequest::_internal_set_x2(int32_t value) {
  
  _impl_.x2_ = value;
}
inline void FindPicRequest::set_x2(int32_t value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.x2)
}

// int32 y2 = 5;
inline void FindPicRequest::clear_y2() {
  _impl_.y2_ = 0;
}
inline int32_t FindPicRequest::_internal_y2() const {
  return _impl_.y2_;
}
inline int32_t FindPicRequest::y2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.y2)
  return _internal_y2();
}
inline void FindPicRequest::_internal_set_y2(int32_t value) {
  
  _impl_.y2_ = value;
}
inline void FindPicRequest::set_y2(int32_t value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.y2)
}

// string pic_name = 6;
inline void FindPicRequest::clear_pic_name() {
  _impl_.pic_name_.ClearToEmpty();
}
inline const std::string& FindPicRequest::pic_name() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.pic_name)
  return _internal_pic_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPicRequest::set_pic_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.pic_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.pic_name)
}
inline std::string* FindPicRequest::mutable_pic_name() {
  std::string* _s = _internal_mutable_pic_name();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.FindPicRequest.pic_name)
  return _s;
}
inline const std::string& FindPicRequest::_internal_pic_name() const {
  return _impl_.pic_name_.Get();
}
inline void FindPicRequest::_internal_set_pic_name(const std::string& value) {
  
  _impl_.pic_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPicRequest::_internal_mutable_pic_name() {
  
  return _impl_.pic_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPicRequest::release_pic_name() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.FindPicRequest.pic_name)
  return _impl_.pic_name_.Release();
}
inline void FindPicRequest::set_allocated_pic_name(std::string* pic_name) {
  if (pic_name != nullptr) {
    
  } else {
    
  }
  _impl_.pic_name_.SetAllocated(pic_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.pic_name_.IsDefault()) {
    _impl_.pic_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.FindPicRequest.pic_name)
}

// string delta_color = 7;
inline void FindPicRequest::clear_delta_color() {
  _impl_.delta_color_.ClearToEmpty();
}
inline const std::string& FindPicRequest::delta_color() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.delta_color)
  return _internal_delta_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindPicRequest::set_delta_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.delta_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.delta_color)
}
inline std::string* FindPicRequest::mutable_delta_color() {
  std::string* _s = _internal_mutable_delta_color();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.FindPicRequest.delta_color)
  return _s;
}
inline const std::string& FindPicRequest::_internal_delta_color() const {
  return _impl_.delta_color_.Get();
}
inline void FindPicRequest::_internal_set_delta_color(const std::string& value) {
  
  _impl_.delta_color_.Set(value, GetArenaForAllocation());
}
inline std::string* FindPicRequest::_internal_mutable_delta_color() {
  
  return _impl_.delta_color_.Mutable(GetArenaForAllocation());
}
inline std::string* FindPicRequest::release_delta_color() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.FindPicRequest.delta_color)
  return _impl_.delta_color_.Release();
}
inline void FindPicRequest::set_allocated_delta_color(std::string* delta_color) {
  if (delta_color != nullptr) {
    
  } else {
    
  }
  _impl_.delta_color_.SetAllocated(delta_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.delta_color_.IsDefault()) {
    _impl_.delta_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.FindPicRequest.delta_color)
}

// double sim = 8;
inline void FindPicRequest::clear_sim() {
  _impl_.sim_ = 0;
}
inline double FindPicRequest::_internal_sim() const {
  return _impl_.sim_;
}
inline double FindPicRequest::sim() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.sim)
  return _internal_sim();
}
inline void FindPicRequest::_internal_set_sim(double value) {
  
  _impl_.sim_ = value;
}
inline void FindPicRequest::set_sim(double value) {
  _internal_set_sim(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.sim)
}

// int32 dir = 9;
inline void FindPicRequest::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t FindPicRequest::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t FindPicRequest::dir() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicRequest.dir)
  return _internal_dir();
}
inline void FindPicRequest::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void FindPicRequest::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicRequest.dir)
}

// -------------------------------------------------------------------

// FindPicResponse

// int32 isOk = 1;
inline void FindPicResponse::clear_isok() {
  _impl_.isok_ = 0;
}
inline int32_t FindPicResponse::_internal_isok() const {
  return _impl_.isok_;
}
inline int32_t FindPicResponse::isok() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicResponse.isOk)
  return _internal_isok();
}
inline void FindPicResponse::_internal_set_isok(int32_t value) {
  
  _impl_.isok_ = value;
}
inline void FindPicResponse::set_isok(int32_t value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicResponse.isOk)
}

// int32 x = 2;
inline void FindPicResponse::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t FindPicResponse::_internal_x() const {
  return _impl_.x_;
}
inline int32_t FindPicResponse::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicResponse.x)
  return _internal_x();
}
inline void FindPicResponse::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void FindPicResponse::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicResponse.x)
}

// int32 y = 3;
inline void FindPicResponse::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t FindPicResponse::_internal_y() const {
  return _impl_.y_;
}
inline int32_t FindPicResponse::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindPicResponse.y)
  return _internal_y();
}
inline void FindPicResponse::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void FindPicResponse::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindPicResponse.y)
}

// -------------------------------------------------------------------

// FindMultiColorExRequest

// int32 index = 1;
inline void FindMultiColorExRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t FindMultiColorExRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.index)
  return _internal_index();
}
inline void FindMultiColorExRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void FindMultiColorExRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.index)
}

// int32 x1 = 2;
inline void FindMultiColorExRequest::clear_x1() {
  _impl_.x1_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_x1() const {
  return _impl_.x1_;
}
inline int32_t FindMultiColorExRequest::x1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.x1)
  return _internal_x1();
}
inline void FindMultiColorExRequest::_internal_set_x1(int32_t value) {
  
  _impl_.x1_ = value;
}
inline void FindMultiColorExRequest::set_x1(int32_t value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.x1)
}

// int32 y1 = 3;
inline void FindMultiColorExRequest::clear_y1() {
  _impl_.y1_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_y1() const {
  return _impl_.y1_;
}
inline int32_t FindMultiColorExRequest::y1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.y1)
  return _internal_y1();
}
inline void FindMultiColorExRequest::_internal_set_y1(int32_t value) {
  
  _impl_.y1_ = value;
}
inline void FindMultiColorExRequest::set_y1(int32_t value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.y1)
}

// int32 x2 = 4;
inline void FindMultiColorExRequest::clear_x2() {
  _impl_.x2_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_x2() const {
  return _impl_.x2_;
}
inline int32_t FindMultiColorExRequest::x2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.x2)
  return _internal_x2();
}
inline void FindMultiColorExRequest::_internal_set_x2(int32_t value) {
  
  _impl_.x2_ = value;
}
inline void FindMultiColorExRequest::set_x2(int32_t value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.x2)
}

// int32 y2 = 5;
inline void FindMultiColorExRequest::clear_y2() {
  _impl_.y2_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_y2() const {
  return _impl_.y2_;
}
inline int32_t FindMultiColorExRequest::y2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.y2)
  return _internal_y2();
}
inline void FindMultiColorExRequest::_internal_set_y2(int32_t value) {
  
  _impl_.y2_ = value;
}
inline void FindMultiColorExRequest::set_y2(int32_t value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.y2)
}

// string first_color = 6;
inline void FindMultiColorExRequest::clear_first_color() {
  _impl_.first_color_.ClearToEmpty();
}
inline const std::string& FindMultiColorExRequest::first_color() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.first_color)
  return _internal_first_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindMultiColorExRequest::set_first_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.first_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.first_color)
}
inline std::string* FindMultiColorExRequest::mutable_first_color() {
  std::string* _s = _internal_mutable_first_color();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.FindMultiColorExRequest.first_color)
  return _s;
}
inline const std::string& FindMultiColorExRequest::_internal_first_color() const {
  return _impl_.first_color_.Get();
}
inline void FindMultiColorExRequest::_internal_set_first_color(const std::string& value) {
  
  _impl_.first_color_.Set(value, GetArenaForAllocation());
}
inline std::string* FindMultiColorExRequest::_internal_mutable_first_color() {
  
  return _impl_.first_color_.Mutable(GetArenaForAllocation());
}
inline std::string* FindMultiColorExRequest::release_first_color() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.FindMultiColorExRequest.first_color)
  return _impl_.first_color_.Release();
}
inline void FindMultiColorExRequest::set_allocated_first_color(std::string* first_color) {
  if (first_color != nullptr) {
    
  } else {
    
  }
  _impl_.first_color_.SetAllocated(first_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.first_color_.IsDefault()) {
    _impl_.first_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.FindMultiColorExRequest.first_color)
}

// string offset_color = 7;
inline void FindMultiColorExRequest::clear_offset_color() {
  _impl_.offset_color_.ClearToEmpty();
}
inline const std::string& FindMultiColorExRequest::offset_color() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.offset_color)
  return _internal_offset_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindMultiColorExRequest::set_offset_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.offset_color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.offset_color)
}
inline std::string* FindMultiColorExRequest::mutable_offset_color() {
  std::string* _s = _internal_mutable_offset_color();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.FindMultiColorExRequest.offset_color)
  return _s;
}
inline const std::string& FindMultiColorExRequest::_internal_offset_color() const {
  return _impl_.offset_color_.Get();
}
inline void FindMultiColorExRequest::_internal_set_offset_color(const std::string& value) {
  
  _impl_.offset_color_.Set(value, GetArenaForAllocation());
}
inline std::string* FindMultiColorExRequest::_internal_mutable_offset_color() {
  
  return _impl_.offset_color_.Mutable(GetArenaForAllocation());
}
inline std::string* FindMultiColorExRequest::release_offset_color() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.FindMultiColorExRequest.offset_color)
  return _impl_.offset_color_.Release();
}
inline void FindMultiColorExRequest::set_allocated_offset_color(std::string* offset_color) {
  if (offset_color != nullptr) {
    
  } else {
    
  }
  _impl_.offset_color_.SetAllocated(offset_color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.offset_color_.IsDefault()) {
    _impl_.offset_color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.FindMultiColorExRequest.offset_color)
}

// double sim = 8;
inline void FindMultiColorExRequest::clear_sim() {
  _impl_.sim_ = 0;
}
inline double FindMultiColorExRequest::_internal_sim() const {
  return _impl_.sim_;
}
inline double FindMultiColorExRequest::sim() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.sim)
  return _internal_sim();
}
inline void FindMultiColorExRequest::_internal_set_sim(double value) {
  
  _impl_.sim_ = value;
}
inline void FindMultiColorExRequest::set_sim(double value) {
  _internal_set_sim(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.sim)
}

// int32 dir = 9;
inline void FindMultiColorExRequest::clear_dir() {
  _impl_.dir_ = 0;
}
inline int32_t FindMultiColorExRequest::_internal_dir() const {
  return _impl_.dir_;
}
inline int32_t FindMultiColorExRequest::dir() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorExRequest.dir)
  return _internal_dir();
}
inline void FindMultiColorExRequest::_internal_set_dir(int32_t value) {
  
  _impl_.dir_ = value;
}
inline void FindMultiColorExRequest::set_dir(int32_t value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorExRequest.dir)
}

// -------------------------------------------------------------------

// FindMultiColorResponse

// int32 isOk = 1;
inline void FindMultiColorResponse::clear_isok() {
  _impl_.isok_ = 0;
}
inline int32_t FindMultiColorResponse::_internal_isok() const {
  return _impl_.isok_;
}
inline int32_t FindMultiColorResponse::isok() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorResponse.isOk)
  return _internal_isok();
}
inline void FindMultiColorResponse::_internal_set_isok(int32_t value) {
  
  _impl_.isok_ = value;
}
inline void FindMultiColorResponse::set_isok(int32_t value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorResponse.isOk)
}

// int32 x = 2;
inline void FindMultiColorResponse::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t FindMultiColorResponse::_internal_x() const {
  return _impl_.x_;
}
inline int32_t FindMultiColorResponse::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorResponse.x)
  return _internal_x();
}
inline void FindMultiColorResponse::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void FindMultiColorResponse::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorResponse.x)
}

// int32 y = 3;
inline void FindMultiColorResponse::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t FindMultiColorResponse::_internal_y() const {
  return _impl_.y_;
}
inline int32_t FindMultiColorResponse::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorResponse.y)
  return _internal_y();
}
inline void FindMultiColorResponse::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void FindMultiColorResponse::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorResponse.y)
}

// -------------------------------------------------------------------

// FindMultiColorRequest

// int32 index = 1;
inline void FindMultiColorRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t FindMultiColorRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t FindMultiColorRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.index)
  return _internal_index();
}
inline void FindMultiColorRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void FindMultiColorRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.index)
}

// int32 x1 = 2;
inline void FindMultiColorRequest::clear_x1() {
  _impl_.x1_ = 0;
}
inline int32_t FindMultiColorRequest::_internal_x1() const {
  return _impl_.x1_;
}
inline int32_t FindMultiColorRequest::x1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.x1)
  return _internal_x1();
}
inline void FindMultiColorRequest::_internal_set_x1(int32_t value) {
  
  _impl_.x1_ = value;
}
inline void FindMultiColorRequest::set_x1(int32_t value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.x1)
}

// int32 y1 = 3;
inline void FindMultiColorRequest::clear_y1() {
  _impl_.y1_ = 0;
}
inline int32_t FindMultiColorRequest::_internal_y1() const {
  return _impl_.y1_;
}
inline int32_t FindMultiColorRequest::y1() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.y1)
  return _internal_y1();
}
inline void FindMultiColorRequest::_internal_set_y1(int32_t value) {
  
  _impl_.y1_ = value;
}
inline void FindMultiColorRequest::set_y1(int32_t value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.y1)
}

// int32 x2 = 4;
inline void FindMultiColorRequest::clear_x2() {
  _impl_.x2_ = 0;
}
inline int32_t FindMultiColorRequest::_internal_x2() const {
  return _impl_.x2_;
}
inline int32_t FindMultiColorRequest::x2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.x2)
  return _internal_x2();
}
inline void FindMultiColorRequest::_internal_set_x2(int32_t value) {
  
  _impl_.x2_ = value;
}
inline void FindMultiColorRequest::set_x2(int32_t value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.x2)
}

// int32 y2 = 5;
inline void FindMultiColorRequest::clear_y2() {
  _impl_.y2_ = 0;
}
inline int32_t FindMultiColorRequest::_internal_y2() const {
  return _impl_.y2_;
}
inline int32_t FindMultiColorRequest::y2() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.y2)
  return _internal_y2();
}
inline void FindMultiColorRequest::_internal_set_y2(int32_t value) {
  
  _impl_.y2_ = value;
}
inline void FindMultiColorRequest::set_y2(int32_t value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.y2)
}

// string color = 6;
inline void FindMultiColorRequest::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& FindMultiColorRequest::color() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FindMultiColorRequest::set_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.color)
}
inline std::string* FindMultiColorRequest::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.FindMultiColorRequest.color)
  return _s;
}
inline const std::string& FindMultiColorRequest::_internal_color() const {
  return _impl_.color_.Get();
}
inline void FindMultiColorRequest::_internal_set_color(const std::string& value) {
  
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* FindMultiColorRequest::_internal_mutable_color() {
  
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* FindMultiColorRequest::release_color() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.FindMultiColorRequest.color)
  return _impl_.color_.Release();
}
inline void FindMultiColorRequest::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.FindMultiColorRequest.color)
}

// double sim = 7;
inline void FindMultiColorRequest::clear_sim() {
  _impl_.sim_ = 0;
}
inline double FindMultiColorRequest::_internal_sim() const {
  return _impl_.sim_;
}
inline double FindMultiColorRequest::sim() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.FindMultiColorRequest.sim)
  return _internal_sim();
}
inline void FindMultiColorRequest::_internal_set_sim(double value) {
  
  _impl_.sim_ = value;
}
inline void FindMultiColorRequest::set_sim(double value) {
  _internal_set_sim(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.FindMultiColorRequest.sim)
}

// -------------------------------------------------------------------

// RectRequest

// int32 index = 1;
inline void RectRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t RectRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t RectRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RectRequest.index)
  return _internal_index();
}
inline void RectRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void RectRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RectRequest.index)
}

// int32 x = 2;
inline void RectRequest::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t RectRequest::_internal_x() const {
  return _impl_.x_;
}
inline int32_t RectRequest::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RectRequest.x)
  return _internal_x();
}
inline void RectRequest::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void RectRequest::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RectRequest.x)
}

// int32 y = 3;
inline void RectRequest::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t RectRequest::_internal_y() const {
  return _impl_.y_;
}
inline int32_t RectRequest::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RectRequest.y)
  return _internal_y();
}
inline void RectRequest::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void RectRequest::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RectRequest.y)
}

// int32 w = 4;
inline void RectRequest::clear_w() {
  _impl_.w_ = 0;
}
inline int32_t RectRequest::_internal_w() const {
  return _impl_.w_;
}
inline int32_t RectRequest::w() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RectRequest.w)
  return _internal_w();
}
inline void RectRequest::_internal_set_w(int32_t value) {
  
  _impl_.w_ = value;
}
inline void RectRequest::set_w(int32_t value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RectRequest.w)
}

// int32 h = 5;
inline void RectRequest::clear_h() {
  _impl_.h_ = 0;
}
inline int32_t RectRequest::_internal_h() const {
  return _impl_.h_;
}
inline int32_t RectRequest::h() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.RectRequest.h)
  return _internal_h();
}
inline void RectRequest::_internal_set_h(int32_t value) {
  
  _impl_.h_ = value;
}
inline void RectRequest::set_h(int32_t value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.RectRequest.h)
}

// -------------------------------------------------------------------

// StringResponse

// string str = 2;
inline void StringResponse::clear_str() {
  _impl_.str_.ClearToEmpty();
}
inline const std::string& StringResponse::str() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.StringResponse.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StringResponse::set_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.StringResponse.str)
}
inline std::string* StringResponse::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.StringResponse.str)
  return _s;
}
inline const std::string& StringResponse::_internal_str() const {
  return _impl_.str_.Get();
}
inline void StringResponse::_internal_set_str(const std::string& value) {
  
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* StringResponse::_internal_mutable_str() {
  
  return _impl_.str_.Mutable(GetArenaForAllocation());
}
inline std::string* StringResponse::release_str() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.StringResponse.str)
  return _impl_.str_.Release();
}
inline void StringResponse::set_allocated_str(std::string* str) {
  if (str != nullptr) {
    
  } else {
    
  }
  _impl_.str_.SetAllocated(str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_.IsDefault()) {
    _impl_.str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.StringResponse.str)
}

// -------------------------------------------------------------------

// PointRequest

// int32 index = 1;
inline void PointRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t PointRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t PointRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.PointRequest.index)
  return _internal_index();
}
inline void PointRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void PointRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.PointRequest.index)
}

// int32 x = 2;
inline void PointRequest::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t PointRequest::_internal_x() const {
  return _impl_.x_;
}
inline int32_t PointRequest::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.PointRequest.x)
  return _internal_x();
}
inline void PointRequest::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void PointRequest::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.PointRequest.x)
}

// int32 y = 3;
inline void PointRequest::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t PointRequest::_internal_y() const {
  return _impl_.y_;
}
inline int32_t PointRequest::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.PointRequest.y)
  return _internal_y();
}
inline void PointRequest::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void PointRequest::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.PointRequest.y)
}

// -------------------------------------------------------------------

// PointResponse

// int32 x = 1;
inline void PointResponse::clear_x() {
  _impl_.x_ = 0;
}
inline int32_t PointResponse::_internal_x() const {
  return _impl_.x_;
}
inline int32_t PointResponse::x() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.PointResponse.x)
  return _internal_x();
}
inline void PointResponse::_internal_set_x(int32_t value) {
  
  _impl_.x_ = value;
}
inline void PointResponse::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.PointResponse.x)
}

// int32 y = 2;
inline void PointResponse::clear_y() {
  _impl_.y_ = 0;
}
inline int32_t PointResponse::_internal_y() const {
  return _impl_.y_;
}
inline int32_t PointResponse::y() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.PointResponse.y)
  return _internal_y();
}
inline void PointResponse::_internal_set_y(int32_t value) {
  
  _impl_.y_ = value;
}
inline void PointResponse::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.PointResponse.y)
}

// -------------------------------------------------------------------

// IndexRequest

// int32 index = 1;
inline void IndexRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t IndexRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t IndexRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.IndexRequest.index)
  return _internal_index();
}
inline void IndexRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void IndexRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.IndexRequest.index)
}

// -------------------------------------------------------------------

// IsOkResponse

// int32 isOk = 1;
inline void IsOkResponse::clear_isok() {
  _impl_.isok_ = 0;
}
inline int32_t IsOkResponse::_internal_isok() const {
  return _impl_.isok_;
}
inline int32_t IsOkResponse::isok() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.IsOkResponse.isOk)
  return _internal_isok();
}
inline void IsOkResponse::_internal_set_isok(int32_t value) {
  
  _impl_.isok_ = value;
}
inline void IsOkResponse::set_isok(int32_t value) {
  _internal_set_isok(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.IsOkResponse.isOk)
}

// -------------------------------------------------------------------

// KeyUpRequest

// int32 index = 1;
inline void KeyUpRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t KeyUpRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t KeyUpRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyUpRequest.index)
  return _internal_index();
}
inline void KeyUpRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void KeyUpRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyUpRequest.index)
}

// int32 vk_code = 2;
inline void KeyUpRequest::clear_vk_code() {
  _impl_.vk_code_ = 0;
}
inline int32_t KeyUpRequest::_internal_vk_code() const {
  return _impl_.vk_code_;
}
inline int32_t KeyUpRequest::vk_code() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyUpRequest.vk_code)
  return _internal_vk_code();
}
inline void KeyUpRequest::_internal_set_vk_code(int32_t value) {
  
  _impl_.vk_code_ = value;
}
inline void KeyUpRequest::set_vk_code(int32_t value) {
  _internal_set_vk_code(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyUpRequest.vk_code)
}

// -------------------------------------------------------------------

// VerResponse

// string version = 2;
inline void VerResponse::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& VerResponse::version() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.VerResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.VerResponse.version)
}
inline std::string* VerResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.VerResponse.version)
  return _s;
}
inline const std::string& VerResponse::_internal_version() const {
  return _impl_.version_.Get();
}
inline void VerResponse::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* VerResponse::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* VerResponse::release_version() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.VerResponse.version)
  return _impl_.version_.Release();
}
inline void VerResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.VerResponse.version)
}

// -------------------------------------------------------------------

// KeyDownRequest

// int32 index = 1;
inline void KeyDownRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t KeyDownRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t KeyDownRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyDownRequest.index)
  return _internal_index();
}
inline void KeyDownRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void KeyDownRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyDownRequest.index)
}

// int32 vk_code = 2;
inline void KeyDownRequest::clear_vk_code() {
  _impl_.vk_code_ = 0;
}
inline int32_t KeyDownRequest::_internal_vk_code() const {
  return _impl_.vk_code_;
}
inline int32_t KeyDownRequest::vk_code() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyDownRequest.vk_code)
  return _internal_vk_code();
}
inline void KeyDownRequest::_internal_set_vk_code(int32_t value) {
  
  _impl_.vk_code_ = value;
}
inline void KeyDownRequest::set_vk_code(int32_t value) {
  _internal_set_vk_code(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyDownRequest.vk_code)
}

// -------------------------------------------------------------------

// KeyDownCharRequest

// int32 index = 1;
inline void KeyDownCharRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t KeyDownCharRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t KeyDownCharRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyDownCharRequest.index)
  return _internal_index();
}
inline void KeyDownCharRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void KeyDownCharRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyDownCharRequest.index)
}

// string key_str = 2;
inline void KeyDownCharRequest::clear_key_str() {
  _impl_.key_str_.ClearToEmpty();
}
inline const std::string& KeyDownCharRequest::key_str() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyDownCharRequest.key_str)
  return _internal_key_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyDownCharRequest::set_key_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyDownCharRequest.key_str)
}
inline std::string* KeyDownCharRequest::mutable_key_str() {
  std::string* _s = _internal_mutable_key_str();
  // @@protoc_insertion_point(field_mutable:dmsoftRpc.KeyDownCharRequest.key_str)
  return _s;
}
inline const std::string& KeyDownCharRequest::_internal_key_str() const {
  return _impl_.key_str_.Get();
}
inline void KeyDownCharRequest::_internal_set_key_str(const std::string& value) {
  
  _impl_.key_str_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyDownCharRequest::_internal_mutable_key_str() {
  
  return _impl_.key_str_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyDownCharRequest::release_key_str() {
  // @@protoc_insertion_point(field_release:dmsoftRpc.KeyDownCharRequest.key_str)
  return _impl_.key_str_.Release();
}
inline void KeyDownCharRequest::set_allocated_key_str(std::string* key_str) {
  if (key_str != nullptr) {
    
  } else {
    
  }
  _impl_.key_str_.SetAllocated(key_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_str_.IsDefault()) {
    _impl_.key_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:dmsoftRpc.KeyDownCharRequest.key_str)
}

// -------------------------------------------------------------------

// KeyPressRequest

// int32 index = 1;
inline void KeyPressRequest::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t KeyPressRequest::_internal_index() const {
  return _impl_.index_;
}
inline int32_t KeyPressRequest::index() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyPressRequest.index)
  return _internal_index();
}
inline void KeyPressRequest::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void KeyPressRequest::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyPressRequest.index)
}

// int32 vk_code = 2;
inline void KeyPressRequest::clear_vk_code() {
  _impl_.vk_code_ = 0;
}
inline int32_t KeyPressRequest::_internal_vk_code() const {
  return _impl_.vk_code_;
}
inline int32_t KeyPressRequest::vk_code() const {
  // @@protoc_insertion_point(field_get:dmsoftRpc.KeyPressRequest.vk_code)
  return _internal_vk_code();
}
inline void KeyPressRequest::_internal_set_vk_code(int32_t value) {
  
  _impl_.vk_code_ = value;
}
inline void KeyPressRequest::set_vk_code(int32_t value) {
  _internal_set_vk_code(value);
  // @@protoc_insertion_point(field_set:dmsoftRpc.KeyPressRequest.vk_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dmsoftRpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dmsoft_2eproto
