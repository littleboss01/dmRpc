// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmsoft.proto

#include "dmsoft.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace dmsoftRpc {
PROTOBUF_CONSTEXPR GetDmIndexResponse::GetDmIndexResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetDmIndexResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDmIndexResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDmIndexResponseDefaultTypeInternal() {}
  union {
    GetDmIndexResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDmIndexResponseDefaultTypeInternal _GetDmIndexResponse_default_instance_;
PROTOBUF_CONSTEXPR SetWindowTextRequest::SetWindowTextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetWindowTextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetWindowTextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetWindowTextRequestDefaultTypeInternal() {}
  union {
    SetWindowTextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetWindowTextRequestDefaultTypeInternal _SetWindowTextRequest_default_instance_;
PROTOBUF_CONSTEXPR SetWindowSizeRequest::SetWindowSizeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetWindowSizeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetWindowSizeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetWindowSizeRequestDefaultTypeInternal() {}
  union {
    SetWindowSizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetWindowSizeRequestDefaultTypeInternal _SetWindowSizeRequest_default_instance_;
PROTOBUF_CONSTEXPR SetClientSizeRequest::SetClientSizeRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetClientSizeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetClientSizeRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetClientSizeRequestDefaultTypeInternal() {}
  union {
    SetClientSizeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetClientSizeRequestDefaultTypeInternal _SetClientSizeRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveWindowRequest::MoveWindowRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveWindowRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveWindowRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveWindowRequestDefaultTypeInternal() {}
  union {
    MoveWindowRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveWindowRequestDefaultTypeInternal _MoveWindowRequest_default_instance_;
PROTOBUF_CONSTEXPR LockRequest::LockRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.lock_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LockRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LockRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LockRequestDefaultTypeInternal() {}
  union {
    LockRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LockRequestDefaultTypeInternal _LockRequest_default_instance_;
PROTOBUF_CONSTEXPR IsBindRequest::IsBindRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsBindRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsBindRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsBindRequestDefaultTypeInternal() {}
  union {
    IsBindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsBindRequestDefaultTypeInternal _IsBindRequest_default_instance_;
PROTOBUF_CONSTEXPR EnableBindRequest::EnableBindRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.enable_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnableBindRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableBindRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableBindRequestDefaultTypeInternal() {}
  union {
    EnableBindRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableBindRequestDefaultTypeInternal _EnableBindRequest_default_instance_;
PROTOBUF_CONSTEXPR DownCpuRequest::DownCpuRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DownCpuRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DownCpuRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DownCpuRequestDefaultTypeInternal() {}
  union {
    DownCpuRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DownCpuRequestDefaultTypeInternal _DownCpuRequest_default_instance_;
PROTOBUF_CONSTEXPR BindWindowExRequest::BindWindowExRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.display_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mouse_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.keypad_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.public__)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.hwnd_)*/0
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BindWindowExRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BindWindowExRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BindWindowExRequestDefaultTypeInternal() {}
  union {
    BindWindowExRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BindWindowExRequestDefaultTypeInternal _BindWindowExRequest_default_instance_;
PROTOBUF_CONSTEXPR StringRequest::StringRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringRequestDefaultTypeInternal() {}
  union {
    StringRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringRequestDefaultTypeInternal _StringRequest_default_instance_;
PROTOBUF_CONSTEXPR RegRequest::RegRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reg_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ver_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegRequestDefaultTypeInternal() {}
  union {
    RegRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegRequestDefaultTypeInternal _RegRequest_default_instance_;
PROTOBUF_CONSTEXPR FindPicRequest::FindPicRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pic_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.delta_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.y1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.y2_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.sim_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindPicRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindPicRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindPicRequestDefaultTypeInternal() {}
  union {
    FindPicRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindPicRequestDefaultTypeInternal _FindPicRequest_default_instance_;
PROTOBUF_CONSTEXPR FindPicResponse::FindPicResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isok_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindPicResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindPicResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindPicResponseDefaultTypeInternal() {}
  union {
    FindPicResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindPicResponseDefaultTypeInternal _FindPicResponse_default_instance_;
PROTOBUF_CONSTEXPR FindMultiColorExRequest::FindMultiColorExRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.first_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.offset_color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.y1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.y2_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.sim_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindMultiColorExRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindMultiColorExRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindMultiColorExRequestDefaultTypeInternal() {}
  union {
    FindMultiColorExRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindMultiColorExRequestDefaultTypeInternal _FindMultiColorExRequest_default_instance_;
PROTOBUF_CONSTEXPR FindMultiColorResponse::FindMultiColorResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isok_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindMultiColorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindMultiColorResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindMultiColorResponseDefaultTypeInternal() {}
  union {
    FindMultiColorResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindMultiColorResponseDefaultTypeInternal _FindMultiColorResponse_default_instance_;
PROTOBUF_CONSTEXPR FindMultiColorRequest::FindMultiColorRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.x1_)*/0
  , /*decltype(_impl_.y1_)*/0
  , /*decltype(_impl_.x2_)*/0
  , /*decltype(_impl_.sim_)*/0
  , /*decltype(_impl_.y2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FindMultiColorRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindMultiColorRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindMultiColorRequestDefaultTypeInternal() {}
  union {
    FindMultiColorRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindMultiColorRequestDefaultTypeInternal _FindMultiColorRequest_default_instance_;
PROTOBUF_CONSTEXPR RectRequest::RectRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.w_)*/0
  , /*decltype(_impl_.h_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectRequestDefaultTypeInternal() {}
  union {
    RectRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectRequestDefaultTypeInternal _RectRequest_default_instance_;
PROTOBUF_CONSTEXPR StringResponse::StringResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StringResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringResponseDefaultTypeInternal() {}
  union {
    StringResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringResponseDefaultTypeInternal _StringResponse_default_instance_;
PROTOBUF_CONSTEXPR PointRequest::PointRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointRequestDefaultTypeInternal() {}
  union {
    PointRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointRequestDefaultTypeInternal _PointRequest_default_instance_;
PROTOBUF_CONSTEXPR PointResponse::PointResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PointResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointResponseDefaultTypeInternal() {}
  union {
    PointResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointResponseDefaultTypeInternal _PointResponse_default_instance_;
PROTOBUF_CONSTEXPR IndexRequest::IndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexRequestDefaultTypeInternal() {}
  union {
    IndexRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexRequestDefaultTypeInternal _IndexRequest_default_instance_;
PROTOBUF_CONSTEXPR IsOkResponse::IsOkResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.isok_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsOkResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsOkResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsOkResponseDefaultTypeInternal() {}
  union {
    IsOkResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsOkResponseDefaultTypeInternal _IsOkResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyUpRequest::KeyUpRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.vk_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyUpRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyUpRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyUpRequestDefaultTypeInternal() {}
  union {
    KeyUpRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyUpRequestDefaultTypeInternal _KeyUpRequest_default_instance_;
PROTOBUF_CONSTEXPR VerResponse::VerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VerResponseDefaultTypeInternal() {}
  union {
    VerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VerResponseDefaultTypeInternal _VerResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyDownRequest::KeyDownRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.vk_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyDownRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyDownRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyDownRequestDefaultTypeInternal() {}
  union {
    KeyDownRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyDownRequestDefaultTypeInternal _KeyDownRequest_default_instance_;
PROTOBUF_CONSTEXPR KeyDownCharRequest::KeyDownCharRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_str_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyDownCharRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyDownCharRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyDownCharRequestDefaultTypeInternal() {}
  union {
    KeyDownCharRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyDownCharRequestDefaultTypeInternal _KeyDownCharRequest_default_instance_;
PROTOBUF_CONSTEXPR KeyPressRequest::KeyPressRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.vk_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyPressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyPressRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyPressRequestDefaultTypeInternal() {}
  union {
    KeyPressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyPressRequestDefaultTypeInternal _KeyPressRequest_default_instance_;
}  // namespace dmsoftRpc
static ::_pb::Metadata file_level_metadata_dmsoft_2eproto[28];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_dmsoft_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_dmsoft_2eproto = nullptr;

const uint32_t TableStruct_dmsoft_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::GetDmIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::GetDmIndexResponse, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowTextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowTextRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowTextRequest, _impl_.hwnd_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowTextRequest, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowSizeRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowSizeRequest, _impl_.hwnd_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowSizeRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetWindowSizeRequest, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetClientSizeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetClientSizeRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetClientSizeRequest, _impl_.hwnd_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetClientSizeRequest, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::SetClientSizeRequest, _impl_.height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::MoveWindowRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::MoveWindowRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::MoveWindowRequest, _impl_.hwnd_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::MoveWindowRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::MoveWindowRequest, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::LockRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::LockRequest, _impl_.lock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IsBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IsBindRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IsBindRequest, _impl_.hwnd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::EnableBindRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::EnableBindRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::EnableBindRequest, _impl_.enable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::DownCpuRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::DownCpuRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::DownCpuRequest, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::DownCpuRequest, _impl_.rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.hwnd_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.display_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.mouse_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.keypad_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.public__),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::BindWindowExRequest, _impl_.mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::StringRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::StringRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::StringRequest, _impl_.path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RegRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RegRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RegRequest, _impl_.reg_code_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RegRequest, _impl_.ver_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.y1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.y2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.pic_name_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.delta_color_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.sim_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicRequest, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicResponse, _impl_.isok_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicResponse, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindPicResponse, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.y1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.y2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.first_color_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.offset_color_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.sim_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorExRequest, _impl_.dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorResponse, _impl_.isok_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorResponse, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorResponse, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.x1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.y1_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.x2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.y2_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::FindMultiColorRequest, _impl_.sim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _impl_.w_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::RectRequest, _impl_.h_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::StringResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::StringResponse, _impl_.str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointRequest, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointRequest, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointResponse, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::PointResponse, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IndexRequest, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IsOkResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::IsOkResponse, _impl_.isok_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyUpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyUpRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyUpRequest, _impl_.vk_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::VerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::VerResponse, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownRequest, _impl_.vk_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownCharRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownCharRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyDownCharRequest, _impl_.key_str_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyPressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyPressRequest, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::dmsoftRpc::KeyPressRequest, _impl_.vk_code_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::dmsoftRpc::GetDmIndexResponse)},
  { 7, -1, -1, sizeof(::dmsoftRpc::SetWindowTextRequest)},
  { 16, -1, -1, sizeof(::dmsoftRpc::SetWindowSizeRequest)},
  { 26, -1, -1, sizeof(::dmsoftRpc::SetClientSizeRequest)},
  { 36, -1, -1, sizeof(::dmsoftRpc::MoveWindowRequest)},
  { 46, -1, -1, sizeof(::dmsoftRpc::LockRequest)},
  { 54, -1, -1, sizeof(::dmsoftRpc::IsBindRequest)},
  { 62, -1, -1, sizeof(::dmsoftRpc::EnableBindRequest)},
  { 70, -1, -1, sizeof(::dmsoftRpc::DownCpuRequest)},
  { 79, -1, -1, sizeof(::dmsoftRpc::BindWindowExRequest)},
  { 92, -1, -1, sizeof(::dmsoftRpc::StringRequest)},
  { 100, -1, -1, sizeof(::dmsoftRpc::RegRequest)},
  { 109, -1, -1, sizeof(::dmsoftRpc::FindPicRequest)},
  { 124, -1, -1, sizeof(::dmsoftRpc::FindPicResponse)},
  { 133, -1, -1, sizeof(::dmsoftRpc::FindMultiColorExRequest)},
  { 148, -1, -1, sizeof(::dmsoftRpc::FindMultiColorResponse)},
  { 157, -1, -1, sizeof(::dmsoftRpc::FindMultiColorRequest)},
  { 170, -1, -1, sizeof(::dmsoftRpc::RectRequest)},
  { 181, -1, -1, sizeof(::dmsoftRpc::StringResponse)},
  { 188, -1, -1, sizeof(::dmsoftRpc::PointRequest)},
  { 197, -1, -1, sizeof(::dmsoftRpc::PointResponse)},
  { 205, -1, -1, sizeof(::dmsoftRpc::IndexRequest)},
  { 212, -1, -1, sizeof(::dmsoftRpc::IsOkResponse)},
  { 219, -1, -1, sizeof(::dmsoftRpc::KeyUpRequest)},
  { 227, -1, -1, sizeof(::dmsoftRpc::VerResponse)},
  { 234, -1, -1, sizeof(::dmsoftRpc::KeyDownRequest)},
  { 242, -1, -1, sizeof(::dmsoftRpc::KeyDownCharRequest)},
  { 250, -1, -1, sizeof(::dmsoftRpc::KeyPressRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::dmsoftRpc::_GetDmIndexResponse_default_instance_._instance,
  &::dmsoftRpc::_SetWindowTextRequest_default_instance_._instance,
  &::dmsoftRpc::_SetWindowSizeRequest_default_instance_._instance,
  &::dmsoftRpc::_SetClientSizeRequest_default_instance_._instance,
  &::dmsoftRpc::_MoveWindowRequest_default_instance_._instance,
  &::dmsoftRpc::_LockRequest_default_instance_._instance,
  &::dmsoftRpc::_IsBindRequest_default_instance_._instance,
  &::dmsoftRpc::_EnableBindRequest_default_instance_._instance,
  &::dmsoftRpc::_DownCpuRequest_default_instance_._instance,
  &::dmsoftRpc::_BindWindowExRequest_default_instance_._instance,
  &::dmsoftRpc::_StringRequest_default_instance_._instance,
  &::dmsoftRpc::_RegRequest_default_instance_._instance,
  &::dmsoftRpc::_FindPicRequest_default_instance_._instance,
  &::dmsoftRpc::_FindPicResponse_default_instance_._instance,
  &::dmsoftRpc::_FindMultiColorExRequest_default_instance_._instance,
  &::dmsoftRpc::_FindMultiColorResponse_default_instance_._instance,
  &::dmsoftRpc::_FindMultiColorRequest_default_instance_._instance,
  &::dmsoftRpc::_RectRequest_default_instance_._instance,
  &::dmsoftRpc::_StringResponse_default_instance_._instance,
  &::dmsoftRpc::_PointRequest_default_instance_._instance,
  &::dmsoftRpc::_PointResponse_default_instance_._instance,
  &::dmsoftRpc::_IndexRequest_default_instance_._instance,
  &::dmsoftRpc::_IsOkResponse_default_instance_._instance,
  &::dmsoftRpc::_KeyUpRequest_default_instance_._instance,
  &::dmsoftRpc::_VerResponse_default_instance_._instance,
  &::dmsoftRpc::_KeyDownRequest_default_instance_._instance,
  &::dmsoftRpc::_KeyDownCharRequest_default_instance_._instance,
  &::dmsoftRpc::_KeyPressRequest_default_instance_._instance,
};

const char descriptor_table_protodef_dmsoft_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014dmsoft.proto\022\tdmsoftRpc\"#\n\022GetDmIndexR"
  "esponse\022\r\n\005index\030\001 \001(\005\"B\n\024SetWindowTextR"
  "equest\022\r\n\005index\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\022\r\n\005t"
  "itle\030\003 \001(\t\"R\n\024SetWindowSizeRequest\022\r\n\005in"
  "dex\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016"
  "\n\006height\030\004 \001(\005\"R\n\024SetClientSizeRequest\022\r"
  "\n\005index\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\022\r\n\005width\030\003 \001"
  "(\005\022\016\n\006height\030\004 \001(\005\"F\n\021MoveWindowRequest\022"
  "\r\n\005index\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\022\t\n\001x\030\003 \001(\005\022"
  "\t\n\001y\030\004 \001(\005\"*\n\013LockRequest\022\r\n\005index\030\001 \001(\005"
  "\022\014\n\004lock\030\002 \001(\005\",\n\rIsBindRequest\022\r\n\005index"
  "\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\"2\n\021EnableBindReques"
  "t\022\r\n\005index\030\001 \001(\005\022\016\n\006enable\030\002 \001(\005\";\n\016Down"
  "CpuRequest\022\r\n\005index\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022"
  "\014\n\004rate\030\003 \001(\005\"\201\001\n\023BindWindowExRequest\022\r\n"
  "\005index\030\001 \001(\005\022\014\n\004hwnd\030\002 \001(\005\022\017\n\007display\030\003 "
  "\001(\t\022\r\n\005mouse\030\004 \001(\t\022\016\n\006keypad\030\005 \001(\t\022\017\n\007pu"
  "blic_\030\006 \001(\t\022\014\n\004mode\030\007 \001(\005\",\n\rStringReque"
  "st\022\r\n\005index\030\001 \001(\005\022\014\n\004path\030\002 \001(\t\"\?\n\nRegRe"
  "quest\022\r\n\005index\030\001 \001(\005\022\020\n\010reg_code\030\002 \001(\t\022\020"
  "\n\010ver_info\030\003 \001(\t\"\220\001\n\016FindPicRequest\022\r\n\005i"
  "ndex\030\001 \001(\005\022\n\n\002x1\030\002 \001(\005\022\n\n\002y1\030\003 \001(\005\022\n\n\002x2"
  "\030\004 \001(\005\022\n\n\002y2\030\005 \001(\005\022\020\n\010pic_name\030\006 \001(\t\022\023\n\013"
  "delta_color\030\007 \001(\t\022\013\n\003sim\030\010 \001(\001\022\013\n\003dir\030\t "
  "\001(\005\"5\n\017FindPicResponse\022\014\n\004isOk\030\001 \001(\005\022\t\n\001"
  "x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"\235\001\n\027FindMultiColorExR"
  "equest\022\r\n\005index\030\001 \001(\005\022\n\n\002x1\030\002 \001(\005\022\n\n\002y1\030"
  "\003 \001(\005\022\n\n\002x2\030\004 \001(\005\022\n\n\002y2\030\005 \001(\005\022\023\n\013first_c"
  "olor\030\006 \001(\t\022\024\n\014offset_color\030\007 \001(\t\022\013\n\003sim\030"
  "\010 \001(\001\022\013\n\003dir\030\t \001(\005\"<\n\026FindMultiColorResp"
  "onse\022\014\n\004isOk\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005"
  "\"r\n\025FindMultiColorRequest\022\r\n\005index\030\001 \001(\005"
  "\022\n\n\002x1\030\002 \001(\005\022\n\n\002y1\030\003 \001(\005\022\n\n\002x2\030\004 \001(\005\022\n\n\002"
  "y2\030\005 \001(\005\022\r\n\005color\030\006 \001(\t\022\013\n\003sim\030\007 \001(\001\"H\n\013"
  "RectRequest\022\r\n\005index\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n"
  "\001y\030\003 \001(\005\022\t\n\001w\030\004 \001(\005\022\t\n\001h\030\005 \001(\005\"\035\n\016String"
  "Response\022\013\n\003str\030\002 \001(\t\"3\n\014PointRequest\022\r\n"
  "\005index\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\"%\n\rPo"
  "intResponse\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"\035\n\014Ind"
  "exRequest\022\r\n\005index\030\001 \001(\005\"\034\n\014IsOkResponse"
  "\022\014\n\004isOk\030\001 \001(\005\".\n\014KeyUpRequest\022\r\n\005index\030"
  "\001 \001(\005\022\017\n\007vk_code\030\002 \001(\005\"\036\n\013VerResponse\022\017\n"
  "\007version\030\002 \001(\t\"0\n\016KeyDownRequest\022\r\n\005inde"
  "x\030\001 \001(\005\022\017\n\007vk_code\030\002 \001(\005\"4\n\022KeyDownCharR"
  "equest\022\r\n\005index\030\001 \001(\005\022\017\n\007key_str\030\002 \001(\t\"1"
  "\n\017KeyPressRequest\022\r\n\005index\030\001 \001(\005\022\017\n\007vk_c"
  "ode\030\002 \001(\0052\017\n\rdmPoolService2\221\022\n\rdmsoftSer"
  "vice\022F\n\nGetDmIndex\022\027.dmsoftRpc.IndexRequ"
  "est\032\035.dmsoftRpc.GetDmIndexResponse\"\000\022C\n\r"
  "ReturnDmIndex\022\027.dmsoftRpc.IndexRequest\032\027"
  ".dmsoftRpc.IsOkResponse\"\000\0228\n\003Ver\022\027.dmsof"
  "tRpc.IndexRequest\032\026.dmsoftRpc.VerRespons"
  "e\"\000\022C\n\014GetCursorPos\022\027.dmsoftRpc.IndexReq"
  "uest\032\030.dmsoftRpc.PointResponse\"\000\022\?\n\007KeyD"
  "own\022\031.dmsoftRpc.KeyDownRequest\032\027.dmsoftR"
  "pc.IsOkResponse\"\000\022G\n\013KeyDownChar\022\035.dmsof"
  "tRpc.KeyDownCharRequest\032\027.dmsoftRpc.IsOk"
  "Response\"\000\022A\n\010KeyPress\022\032.dmsoftRpc.KeyPr"
  "essRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022;\n"
  "\005KeyUp\022\027.dmsoftRpc.KeyUpRequest\032\027.dmsoft"
  "Rpc.IsOkResponse\"\000\022\?\n\tLeftClick\022\027.dmsoft"
  "Rpc.IndexRequest\032\027.dmsoftRpc.IsOkRespons"
  "e\"\000\022E\n\017LeftDoubleClick\022\027.dmsoftRpc.Index"
  "Request\032\027.dmsoftRpc.IsOkResponse\"\000\022>\n\010Le"
  "ftDown\022\027.dmsoftRpc.IndexRequest\032\027.dmsoft"
  "Rpc.IsOkResponse\"\000\022<\n\006LeftUp\022\027.dmsoftRpc"
  ".IndexRequest\032\027.dmsoftRpc.IsOkResponse\"\000"
  "\022;\n\005MoveR\022\027.dmsoftRpc.PointRequest\032\027.dms"
  "oftRpc.IsOkResponse\"\000\022<\n\006MoveTo\022\027.dmsoft"
  "Rpc.PointRequest\032\027.dmsoftRpc.IsOkRespons"
  "e\"\000\022\?\n\010MoveToEx\022\026.dmsoftRpc.RectRequest\032"
  "\031.dmsoftRpc.StringResponse\"\000\022@\n\nRightCli"
  "ck\022\027.dmsoftRpc.IndexRequest\032\027.dmsoftRpc."
  "IsOkResponse\"\000\022\?\n\tRightDown\022\027.dmsoftRpc."
  "IndexRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022"
  "=\n\007RightUp\022\027.dmsoftRpc.IndexRequest\032\027.dm"
  "softRpc.IsOkResponse\"\000\022K\n\014FindMulColor\022 "
  ".dmsoftRpc.FindMultiColorRequest\032\027.dmsof"
  "tRpc.IsOkResponse\"\000\022Y\n\016FindMultiColor\022\"."
  "dmsoftRpc.FindMultiColorExRequest\032!.dmso"
  "ftRpc.FindMultiColorResponse\"\000\022\?\n\007FindPi"
  "c\022\031.dmsoftRpc.FindPicRequest\032\027.dmsoftRpc"
  ".IsOkResponse\"\000\022@\n\010GetColor\022\027.dmsoftRpc."
  "PointRequest\032\031.dmsoftRpc.StringResponse\""
  "\000\0227\n\003Reg\022\025.dmsoftRpc.RegRequest\032\027.dmsoft"
  "Rpc.IsOkResponse\"\000\022>\n\007SetPath\022\030.dmsoftRp"
  "c.StringRequest\032\027.dmsoftRpc.IsOkResponse"
  "\"\000\022I\n\014BindWindowEx\022\036.dmsoftRpc.BindWindo"
  "wExRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022\?\n"
  "\007DownCpu\022\031.dmsoftRpc.DownCpuRequest\032\027.dm"
  "softRpc.IsOkResponse\"\000\022E\n\nEnableBind\022\034.d"
  "msoftRpc.EnableBindRequest\032\027.dmsoftRpc.I"
  "sOkResponse\"\000\022=\n\006IsBind\022\030.dmsoftRpc.IsBi"
  "ndRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022>\n\t"
  "LockInput\022\026.dmsoftRpc.LockRequest\032\027.dmso"
  "ftRpc.IsOkResponse\"\000\022B\n\014UnBindWindow\022\027.d"
  "msoftRpc.IndexRequest\032\027.dmsoftRpc.IsOkRe"
  "sponse\"\000\022E\n\nMoveWindow\022\034.dmsoftRpc.MoveW"
  "indowRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022"
  "K\n\rSetClientSize\022\037.dmsoftRpc.SetClientSi"
  "zeRequest\032\027.dmsoftRpc.IsOkResponse\"\000\022K\n\r"
  "SetWindowSize\022\037.dmsoftRpc.SetWindowSizeR"
  "equest\032\027.dmsoftRpc.IsOkResponse\"\000\022K\n\rSet"
  "WindowText\022\037.dmsoftRpc.SetWindowTextRequ"
  "est\032\027.dmsoftRpc.IsOkResponse\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_dmsoft_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_dmsoft_2eproto = {
    false, false, 4198, descriptor_table_protodef_dmsoft_2eproto,
    "dmsoft.proto",
    &descriptor_table_dmsoft_2eproto_once, nullptr, 0, 28,
    schemas, file_default_instances, TableStruct_dmsoft_2eproto::offsets,
    file_level_metadata_dmsoft_2eproto, file_level_enum_descriptors_dmsoft_2eproto,
    file_level_service_descriptors_dmsoft_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_dmsoft_2eproto_getter() {
  return &descriptor_table_dmsoft_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_dmsoft_2eproto(&descriptor_table_dmsoft_2eproto);
namespace dmsoftRpc {

// ===================================================================

class GetDmIndexResponse::_Internal {
 public:
};

GetDmIndexResponse::GetDmIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.GetDmIndexResponse)
}
GetDmIndexResponse::GetDmIndexResponse(const GetDmIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetDmIndexResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.GetDmIndexResponse)
}

inline void GetDmIndexResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetDmIndexResponse::~GetDmIndexResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.GetDmIndexResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetDmIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetDmIndexResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetDmIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.GetDmIndexResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDmIndexResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetDmIndexResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.GetDmIndexResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.GetDmIndexResponse)
  return target;
}

size_t GetDmIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.GetDmIndexResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetDmIndexResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetDmIndexResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetDmIndexResponse::GetClassData() const { return &_class_data_; }


void GetDmIndexResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetDmIndexResponse*>(&to_msg);
  auto& from = static_cast<const GetDmIndexResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.GetDmIndexResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetDmIndexResponse::CopyFrom(const GetDmIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.GetDmIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDmIndexResponse::IsInitialized() const {
  return true;
}

void GetDmIndexResponse::InternalSwap(GetDmIndexResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDmIndexResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[0]);
}

// ===================================================================

class SetWindowTextRequest::_Internal {
 public:
};

SetWindowTextRequest::SetWindowTextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.SetWindowTextRequest)
}
SetWindowTextRequest::SetWindowTextRequest(const SetWindowTextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetWindowTextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hwnd_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hwnd_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.SetWindowTextRequest)
}

inline void SetWindowTextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetWindowTextRequest::~SetWindowTextRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.SetWindowTextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetWindowTextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void SetWindowTextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetWindowTextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.SetWindowTextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hwnd_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hwnd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWindowTextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.SetWindowTextRequest.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetWindowTextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.SetWindowTextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.SetWindowTextRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.SetWindowTextRequest)
  return target;
}

size_t SetWindowTextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.SetWindowTextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWindowTextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetWindowTextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWindowTextRequest::GetClassData() const { return &_class_data_; }


void SetWindowTextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetWindowTextRequest*>(&to_msg);
  auto& from = static_cast<const SetWindowTextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.SetWindowTextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWindowTextRequest::CopyFrom(const SetWindowTextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.SetWindowTextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWindowTextRequest::IsInitialized() const {
  return true;
}

void SetWindowTextRequest::InternalSwap(SetWindowTextRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetWindowTextRequest, _impl_.hwnd_)
      + sizeof(SetWindowTextRequest::_impl_.hwnd_)
      - PROTOBUF_FIELD_OFFSET(SetWindowTextRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWindowTextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[1]);
}

// ===================================================================

class SetWindowSizeRequest::_Internal {
 public:
};

SetWindowSizeRequest::SetWindowSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.SetWindowSizeRequest)
}
SetWindowSizeRequest::SetWindowSizeRequest(const SetWindowSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetWindowSizeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.SetWindowSizeRequest)
}

inline void SetWindowSizeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetWindowSizeRequest::~SetWindowSizeRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.SetWindowSizeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetWindowSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetWindowSizeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetWindowSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.SetWindowSizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetWindowSizeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetWindowSizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.SetWindowSizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.SetWindowSizeRequest)
  return target;
}

size_t SetWindowSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.SetWindowSizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetWindowSizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetWindowSizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetWindowSizeRequest::GetClassData() const { return &_class_data_; }


void SetWindowSizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetWindowSizeRequest*>(&to_msg);
  auto& from = static_cast<const SetWindowSizeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.SetWindowSizeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetWindowSizeRequest::CopyFrom(const SetWindowSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.SetWindowSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetWindowSizeRequest::IsInitialized() const {
  return true;
}

void SetWindowSizeRequest::InternalSwap(SetWindowSizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetWindowSizeRequest, _impl_.height_)
      + sizeof(SetWindowSizeRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SetWindowSizeRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetWindowSizeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[2]);
}

// ===================================================================

class SetClientSizeRequest::_Internal {
 public:
};

SetClientSizeRequest::SetClientSizeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.SetClientSizeRequest)
}
SetClientSizeRequest::SetClientSizeRequest(const SetClientSizeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetClientSizeRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.height_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.SetClientSizeRequest)
}

inline void SetClientSizeRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SetClientSizeRequest::~SetClientSizeRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.SetClientSizeRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetClientSizeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetClientSizeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetClientSizeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.SetClientSizeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.height_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetClientSizeRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetClientSizeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.SetClientSizeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.SetClientSizeRequest)
  return target;
}

size_t SetClientSizeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.SetClientSizeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  // int32 width = 3;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetClientSizeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetClientSizeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetClientSizeRequest::GetClassData() const { return &_class_data_; }


void SetClientSizeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetClientSizeRequest*>(&to_msg);
  auto& from = static_cast<const SetClientSizeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.SetClientSizeRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetClientSizeRequest::CopyFrom(const SetClientSizeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.SetClientSizeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetClientSizeRequest::IsInitialized() const {
  return true;
}

void SetClientSizeRequest::InternalSwap(SetClientSizeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetClientSizeRequest, _impl_.height_)
      + sizeof(SetClientSizeRequest::_impl_.height_)
      - PROTOBUF_FIELD_OFFSET(SetClientSizeRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetClientSizeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[3]);
}

// ===================================================================

class MoveWindowRequest::_Internal {
 public:
};

MoveWindowRequest::MoveWindowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.MoveWindowRequest)
}
MoveWindowRequest::MoveWindowRequest(const MoveWindowRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveWindowRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.MoveWindowRequest)
}

inline void MoveWindowRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MoveWindowRequest::~MoveWindowRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.MoveWindowRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveWindowRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MoveWindowRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveWindowRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.MoveWindowRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveWindowRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveWindowRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.MoveWindowRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_x(), target);
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.MoveWindowRequest)
  return target;
}

size_t MoveWindowRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.MoveWindowRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  // int32 x = 3;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 4;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveWindowRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveWindowRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveWindowRequest::GetClassData() const { return &_class_data_; }


void MoveWindowRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveWindowRequest*>(&to_msg);
  auto& from = static_cast<const MoveWindowRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.MoveWindowRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveWindowRequest::CopyFrom(const MoveWindowRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.MoveWindowRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveWindowRequest::IsInitialized() const {
  return true;
}

void MoveWindowRequest::InternalSwap(MoveWindowRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveWindowRequest, _impl_.y_)
      + sizeof(MoveWindowRequest::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(MoveWindowRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveWindowRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[4]);
}

// ===================================================================

class LockRequest::_Internal {
 public:
};

LockRequest::LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LockRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.lock_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lock_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.lock_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.LockRequest)
}

inline void LockRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.lock_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.LockRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LockRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.LockRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lock_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.lock_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LockRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.LockRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 lock = 2;
  if (this->_internal_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_lock(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.LockRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 lock = 2;
  if (this->_internal_lock() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lock());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LockRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LockRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LockRequest::GetClassData() const { return &_class_data_; }


void LockRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LockRequest*>(&to_msg);
  auto& from = static_cast<const LockRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.LockRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_lock() != 0) {
    _this->_internal_set_lock(from._internal_lock());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockRequest, _impl_.lock_)
      + sizeof(LockRequest::_impl_.lock_)
      - PROTOBUF_FIELD_OFFSET(LockRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[5]);
}

// ===================================================================

class IsBindRequest::_Internal {
 public:
};

IsBindRequest::IsBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.IsBindRequest)
}
IsBindRequest::IsBindRequest(const IsBindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsBindRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hwnd_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hwnd_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.IsBindRequest)
}

inline void IsBindRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsBindRequest::~IsBindRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.IsBindRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsBindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsBindRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.IsBindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hwnd_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.hwnd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsBindRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsBindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.IsBindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.IsBindRequest)
  return target;
}

size_t IsBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.IsBindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsBindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsBindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsBindRequest::GetClassData() const { return &_class_data_; }


void IsBindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsBindRequest*>(&to_msg);
  auto& from = static_cast<const IsBindRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.IsBindRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsBindRequest::CopyFrom(const IsBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.IsBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsBindRequest::IsInitialized() const {
  return true;
}

void IsBindRequest::InternalSwap(IsBindRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IsBindRequest, _impl_.hwnd_)
      + sizeof(IsBindRequest::_impl_.hwnd_)
      - PROTOBUF_FIELD_OFFSET(IsBindRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IsBindRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[6]);
}

// ===================================================================

class EnableBindRequest::_Internal {
 public:
};

EnableBindRequest::EnableBindRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.EnableBindRequest)
}
EnableBindRequest::EnableBindRequest(const EnableBindRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnableBindRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.enable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.EnableBindRequest)
}

inline void EnableBindRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.enable_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnableBindRequest::~EnableBindRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.EnableBindRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableBindRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableBindRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableBindRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.EnableBindRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.enable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnableBindRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 enable = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnableBindRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.EnableBindRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 enable = 2;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.EnableBindRequest)
  return target;
}

size_t EnableBindRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.EnableBindRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 enable = 2;
  if (this->_internal_enable() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_enable());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnableBindRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnableBindRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnableBindRequest::GetClassData() const { return &_class_data_; }


void EnableBindRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnableBindRequest*>(&to_msg);
  auto& from = static_cast<const EnableBindRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.EnableBindRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnableBindRequest::CopyFrom(const EnableBindRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.EnableBindRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableBindRequest::IsInitialized() const {
  return true;
}

void EnableBindRequest::InternalSwap(EnableBindRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EnableBindRequest, _impl_.enable_)
      + sizeof(EnableBindRequest::_impl_.enable_)
      - PROTOBUF_FIELD_OFFSET(EnableBindRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EnableBindRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[7]);
}

// ===================================================================

class DownCpuRequest::_Internal {
 public:
};

DownCpuRequest::DownCpuRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.DownCpuRequest)
}
DownCpuRequest::DownCpuRequest(const DownCpuRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DownCpuRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.rate_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.rate_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.DownCpuRequest)
}

inline void DownCpuRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DownCpuRequest::~DownCpuRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.DownCpuRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DownCpuRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DownCpuRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DownCpuRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.DownCpuRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.rate_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DownCpuRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DownCpuRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.DownCpuRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 rate = 3;
  if (this->_internal_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.DownCpuRequest)
  return target;
}

size_t DownCpuRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.DownCpuRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 rate = 3;
  if (this->_internal_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DownCpuRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DownCpuRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DownCpuRequest::GetClassData() const { return &_class_data_; }


void DownCpuRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DownCpuRequest*>(&to_msg);
  auto& from = static_cast<const DownCpuRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.DownCpuRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_rate() != 0) {
    _this->_internal_set_rate(from._internal_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DownCpuRequest::CopyFrom(const DownCpuRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.DownCpuRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownCpuRequest::IsInitialized() const {
  return true;
}

void DownCpuRequest::InternalSwap(DownCpuRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DownCpuRequest, _impl_.rate_)
      + sizeof(DownCpuRequest::_impl_.rate_)
      - PROTOBUF_FIELD_OFFSET(DownCpuRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DownCpuRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[8]);
}

// ===================================================================

class BindWindowExRequest::_Internal {
 public:
};

BindWindowExRequest::BindWindowExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.BindWindowExRequest)
}
BindWindowExRequest::BindWindowExRequest(const BindWindowExRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BindWindowExRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.display_){}
    , decltype(_impl_.mouse_){}
    , decltype(_impl_.keypad_){}
    , decltype(_impl_.public__){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.hwnd_){}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display().empty()) {
    _this->_impl_.display_.Set(from._internal_display(), 
      _this->GetArenaForAllocation());
  }
  _impl_.mouse_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mouse_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mouse().empty()) {
    _this->_impl_.mouse_.Set(from._internal_mouse(), 
      _this->GetArenaForAllocation());
  }
  _impl_.keypad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keypad_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_keypad().empty()) {
    _this->_impl_.keypad_.Set(from._internal_keypad(), 
      _this->GetArenaForAllocation());
  }
  _impl_.public__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_().empty()) {
    _this->_impl_.public__.Set(from._internal_public_(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.BindWindowExRequest)
}

inline void BindWindowExRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.display_){}
    , decltype(_impl_.mouse_){}
    , decltype(_impl_.keypad_){}
    , decltype(_impl_.public__){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.hwnd_){0}
    , decltype(_impl_.mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.mouse_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mouse_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.keypad_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.keypad_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.public__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BindWindowExRequest::~BindWindowExRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.BindWindowExRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BindWindowExRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.display_.Destroy();
  _impl_.mouse_.Destroy();
  _impl_.keypad_.Destroy();
  _impl_.public__.Destroy();
}

void BindWindowExRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BindWindowExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.BindWindowExRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.display_.ClearToEmpty();
  _impl_.mouse_.ClearToEmpty();
  _impl_.keypad_.ClearToEmpty();
  _impl_.public__.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BindWindowExRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hwnd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.hwnd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_display();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.BindWindowExRequest.display"));
        } else
          goto handle_unusual;
        continue;
      // string mouse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_mouse();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.BindWindowExRequest.mouse"));
        } else
          goto handle_unusual;
        continue;
      // string keypad = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_keypad();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.BindWindowExRequest.keypad"));
        } else
          goto handle_unusual;
        continue;
      // string public_ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_public_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.BindWindowExRequest.public_"));
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BindWindowExRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.BindWindowExRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_hwnd(), target);
  }

  // string display = 3;
  if (!this->_internal_display().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display().data(), static_cast<int>(this->_internal_display().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.BindWindowExRequest.display");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_display(), target);
  }

  // string mouse = 4;
  if (!this->_internal_mouse().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mouse().data(), static_cast<int>(this->_internal_mouse().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.BindWindowExRequest.mouse");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_mouse(), target);
  }

  // string keypad = 5;
  if (!this->_internal_keypad().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_keypad().data(), static_cast<int>(this->_internal_keypad().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.BindWindowExRequest.keypad");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_keypad(), target);
  }

  // string public_ = 6;
  if (!this->_internal_public_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_public_().data(), static_cast<int>(this->_internal_public_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.BindWindowExRequest.public_");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_public_(), target);
  }

  // int32 mode = 7;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.BindWindowExRequest)
  return target;
}

size_t BindWindowExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.BindWindowExRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display = 3;
  if (!this->_internal_display().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display());
  }

  // string mouse = 4;
  if (!this->_internal_mouse().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mouse());
  }

  // string keypad = 5;
  if (!this->_internal_keypad().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_keypad());
  }

  // string public_ = 6;
  if (!this->_internal_public_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_public_());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 hwnd = 2;
  if (this->_internal_hwnd() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hwnd());
  }

  // int32 mode = 7;
  if (this->_internal_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BindWindowExRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BindWindowExRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BindWindowExRequest::GetClassData() const { return &_class_data_; }


void BindWindowExRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BindWindowExRequest*>(&to_msg);
  auto& from = static_cast<const BindWindowExRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.BindWindowExRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_display().empty()) {
    _this->_internal_set_display(from._internal_display());
  }
  if (!from._internal_mouse().empty()) {
    _this->_internal_set_mouse(from._internal_mouse());
  }
  if (!from._internal_keypad().empty()) {
    _this->_internal_set_keypad(from._internal_keypad());
  }
  if (!from._internal_public_().empty()) {
    _this->_internal_set_public_(from._internal_public_());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_hwnd() != 0) {
    _this->_internal_set_hwnd(from._internal_hwnd());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BindWindowExRequest::CopyFrom(const BindWindowExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.BindWindowExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindWindowExRequest::IsInitialized() const {
  return true;
}

void BindWindowExRequest::InternalSwap(BindWindowExRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_, lhs_arena,
      &other->_impl_.display_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mouse_, lhs_arena,
      &other->_impl_.mouse_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.keypad_, lhs_arena,
      &other->_impl_.keypad_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.public__, lhs_arena,
      &other->_impl_.public__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BindWindowExRequest, _impl_.mode_)
      + sizeof(BindWindowExRequest::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(BindWindowExRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BindWindowExRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[9]);
}

// ===================================================================

class StringRequest::_Internal {
 public:
};

StringRequest::StringRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.StringRequest)
}
StringRequest::StringRequest(const StringRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    _this->_impl_.path_.Set(from._internal_path(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.StringRequest)
}

inline void StringRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.path_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringRequest::~StringRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.StringRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void StringRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.StringRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.path_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.StringRequest.path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.StringRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string path = 2;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.StringRequest.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.StringRequest)
  return target;
}

size_t StringRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.StringRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 2;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringRequest::GetClassData() const { return &_class_data_; }


void StringRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringRequest*>(&to_msg);
  auto& from = static_cast<const StringRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.StringRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _this->_internal_set_path(from._internal_path());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringRequest::CopyFrom(const StringRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.StringRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringRequest::IsInitialized() const {
  return true;
}

void StringRequest::InternalSwap(StringRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.path_, lhs_arena,
      &other->_impl_.path_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[10]);
}

// ===================================================================

class RegRequest::_Internal {
 public:
};

RegRequest::RegRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.RegRequest)
}
RegRequest::RegRequest(const RegRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_code_){}
    , decltype(_impl_.ver_info_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reg_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reg_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reg_code().empty()) {
    _this->_impl_.reg_code_.Set(from._internal_reg_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ver_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ver_info().empty()) {
    _this->_impl_.ver_info_.Set(from._internal_ver_info(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.RegRequest)
}

inline void RegRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reg_code_){}
    , decltype(_impl_.ver_info_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reg_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reg_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ver_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ver_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegRequest::~RegRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.RegRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reg_code_.Destroy();
  _impl_.ver_info_.Destroy();
}

void RegRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.RegRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reg_code_.ClearToEmpty();
  _impl_.ver_info_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reg_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reg_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.RegRequest.reg_code"));
        } else
          goto handle_unusual;
        continue;
      // string ver_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ver_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.RegRequest.ver_info"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.RegRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string reg_code = 2;
  if (!this->_internal_reg_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reg_code().data(), static_cast<int>(this->_internal_reg_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.RegRequest.reg_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reg_code(), target);
  }

  // string ver_info = 3;
  if (!this->_internal_ver_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ver_info().data(), static_cast<int>(this->_internal_ver_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.RegRequest.ver_info");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ver_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.RegRequest)
  return target;
}

size_t RegRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.RegRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reg_code = 2;
  if (!this->_internal_reg_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reg_code());
  }

  // string ver_info = 3;
  if (!this->_internal_ver_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ver_info());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegRequest::GetClassData() const { return &_class_data_; }


void RegRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegRequest*>(&to_msg);
  auto& from = static_cast<const RegRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.RegRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reg_code().empty()) {
    _this->_internal_set_reg_code(from._internal_reg_code());
  }
  if (!from._internal_ver_info().empty()) {
    _this->_internal_set_ver_info(from._internal_ver_info());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegRequest::CopyFrom(const RegRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.RegRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegRequest::IsInitialized() const {
  return true;
}

void RegRequest::InternalSwap(RegRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reg_code_, lhs_arena,
      &other->_impl_.reg_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ver_info_, lhs_arena,
      &other->_impl_.ver_info_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[11]);
}

// ===================================================================

class FindPicRequest::_Internal {
 public:
};

FindPicRequest::FindPicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.FindPicRequest)
}
FindPicRequest::FindPicRequest(const FindPicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindPicRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_name_){}
    , decltype(_impl_.delta_color_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.x1_){}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.y2_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.sim_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.pic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pic_name().empty()) {
    _this->_impl_.pic_name_.Set(from._internal_pic_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.delta_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delta_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delta_color().empty()) {
    _this->_impl_.delta_color_.Set(from._internal_delta_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sim_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sim_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.FindPicRequest)
}

inline void FindPicRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pic_name_){}
    , decltype(_impl_.delta_color_){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.x1_){0}
    , decltype(_impl_.y1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.y2_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.sim_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.pic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delta_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.delta_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindPicRequest::~FindPicRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.FindPicRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindPicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pic_name_.Destroy();
  _impl_.delta_color_.Destroy();
}

void FindPicRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindPicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.FindPicRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pic_name_.ClearToEmpty();
  _impl_.delta_color_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sim_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindPicRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pic_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pic_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.FindPicRequest.pic_name"));
        } else
          goto handle_unusual;
        continue;
      // string delta_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_delta_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.FindPicRequest.delta_color"));
        } else
          goto handle_unusual;
        continue;
      // double sim = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.sim_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindPicRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.FindPicRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x1(), target);
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y1(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x2(), target);
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y2(), target);
  }

  // string pic_name = 6;
  if (!this->_internal_pic_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pic_name().data(), static_cast<int>(this->_internal_pic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.FindPicRequest.pic_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pic_name(), target);
  }

  // string delta_color = 7;
  if (!this->_internal_delta_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delta_color().data(), static_cast<int>(this->_internal_delta_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.FindPicRequest.delta_color");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_delta_color(), target);
  }

  // double sim = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_sim(), target);
  }

  // int32 dir = 9;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.FindPicRequest)
  return target;
}

size_t FindPicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.FindPicRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pic_name = 6;
  if (!this->_internal_pic_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pic_name());
  }

  // string delta_color = 7;
  if (!this->_internal_delta_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delta_color());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x1());
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y1());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x2());
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y2());
  }

  // int32 dir = 9;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // double sim = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindPicRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindPicRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindPicRequest::GetClassData() const { return &_class_data_; }


void FindPicRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindPicRequest*>(&to_msg);
  auto& from = static_cast<const FindPicRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.FindPicRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pic_name().empty()) {
    _this->_internal_set_pic_name(from._internal_pic_name());
  }
  if (!from._internal_delta_color().empty()) {
    _this->_internal_set_delta_color(from._internal_delta_color());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = from._internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    _this->_internal_set_sim(from._internal_sim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindPicRequest::CopyFrom(const FindPicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.FindPicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPicRequest::IsInitialized() const {
  return true;
}

void FindPicRequest::InternalSwap(FindPicRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pic_name_, lhs_arena,
      &other->_impl_.pic_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.delta_color_, lhs_arena,
      &other->_impl_.delta_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindPicRequest, _impl_.sim_)
      + sizeof(FindPicRequest::_impl_.sim_)
      - PROTOBUF_FIELD_OFFSET(FindPicRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindPicRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[12]);
}

// ===================================================================

class FindPicResponse::_Internal {
 public:
};

FindPicResponse::FindPicResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.FindPicResponse)
}
FindPicResponse::FindPicResponse(const FindPicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindPicResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isok_, &from._impl_.isok_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.isok_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.FindPicResponse)
}

inline void FindPicResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FindPicResponse::~FindPicResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.FindPicResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindPicResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindPicResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindPicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.FindPicResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.isok_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindPicResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 isOk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindPicResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.FindPicResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_isok(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.FindPicResponse)
  return target;
}

size_t FindPicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.FindPicResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_isok());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindPicResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindPicResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindPicResponse::GetClassData() const { return &_class_data_; }


void FindPicResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindPicResponse*>(&to_msg);
  auto& from = static_cast<const FindPicResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.FindPicResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isok() != 0) {
    _this->_internal_set_isok(from._internal_isok());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindPicResponse::CopyFrom(const FindPicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.FindPicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindPicResponse::IsInitialized() const {
  return true;
}

void FindPicResponse::InternalSwap(FindPicResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindPicResponse, _impl_.y_)
      + sizeof(FindPicResponse::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(FindPicResponse, _impl_.isok_)>(
          reinterpret_cast<char*>(&_impl_.isok_),
          reinterpret_cast<char*>(&other->_impl_.isok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindPicResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[13]);
}

// ===================================================================

class FindMultiColorExRequest::_Internal {
 public:
};

FindMultiColorExRequest::FindMultiColorExRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.FindMultiColorExRequest)
}
FindMultiColorExRequest::FindMultiColorExRequest(const FindMultiColorExRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindMultiColorExRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.first_color_){}
    , decltype(_impl_.offset_color_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.x1_){}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.y2_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.sim_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.first_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_first_color().empty()) {
    _this->_impl_.first_color_.Set(from._internal_first_color(), 
      _this->GetArenaForAllocation());
  }
  _impl_.offset_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offset_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_offset_color().empty()) {
    _this->_impl_.offset_color_.Set(from._internal_offset_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sim_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sim_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.FindMultiColorExRequest)
}

inline void FindMultiColorExRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.first_color_){}
    , decltype(_impl_.offset_color_){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.x1_){0}
    , decltype(_impl_.y1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.y2_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.sim_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.first_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.first_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.offset_color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.offset_color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindMultiColorExRequest::~FindMultiColorExRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.FindMultiColorExRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindMultiColorExRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.first_color_.Destroy();
  _impl_.offset_color_.Destroy();
}

void FindMultiColorExRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindMultiColorExRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.FindMultiColorExRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.first_color_.ClearToEmpty();
  _impl_.offset_color_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sim_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.sim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindMultiColorExRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string first_color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_first_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.FindMultiColorExRequest.first_color"));
        } else
          goto handle_unusual;
        continue;
      // string offset_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_offset_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.FindMultiColorExRequest.offset_color"));
        } else
          goto handle_unusual;
        continue;
      // double sim = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.sim_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 dir = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindMultiColorExRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.FindMultiColorExRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x1(), target);
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y1(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x2(), target);
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y2(), target);
  }

  // string first_color = 6;
  if (!this->_internal_first_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_first_color().data(), static_cast<int>(this->_internal_first_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.FindMultiColorExRequest.first_color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_first_color(), target);
  }

  // string offset_color = 7;
  if (!this->_internal_offset_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_offset_color().data(), static_cast<int>(this->_internal_offset_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.FindMultiColorExRequest.offset_color");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_offset_color(), target);
  }

  // double sim = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_sim(), target);
  }

  // int32 dir = 9;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.FindMultiColorExRequest)
  return target;
}

size_t FindMultiColorExRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.FindMultiColorExRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string first_color = 6;
  if (!this->_internal_first_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_first_color());
  }

  // string offset_color = 7;
  if (!this->_internal_offset_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_offset_color());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x1());
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y1());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x2());
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y2());
  }

  // int32 dir = 9;
  if (this->_internal_dir() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dir());
  }

  // double sim = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindMultiColorExRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindMultiColorExRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindMultiColorExRequest::GetClassData() const { return &_class_data_; }


void FindMultiColorExRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindMultiColorExRequest*>(&to_msg);
  auto& from = static_cast<const FindMultiColorExRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.FindMultiColorExRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_first_color().empty()) {
    _this->_internal_set_first_color(from._internal_first_color());
  }
  if (!from._internal_offset_color().empty()) {
    _this->_internal_set_offset_color(from._internal_offset_color());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  if (from._internal_dir() != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = from._internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    _this->_internal_set_sim(from._internal_sim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindMultiColorExRequest::CopyFrom(const FindMultiColorExRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.FindMultiColorExRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindMultiColorExRequest::IsInitialized() const {
  return true;
}

void FindMultiColorExRequest::InternalSwap(FindMultiColorExRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.first_color_, lhs_arena,
      &other->_impl_.first_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.offset_color_, lhs_arena,
      &other->_impl_.offset_color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindMultiColorExRequest, _impl_.sim_)
      + sizeof(FindMultiColorExRequest::_impl_.sim_)
      - PROTOBUF_FIELD_OFFSET(FindMultiColorExRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindMultiColorExRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[14]);
}

// ===================================================================

class FindMultiColorResponse::_Internal {
 public:
};

FindMultiColorResponse::FindMultiColorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.FindMultiColorResponse)
}
FindMultiColorResponse::FindMultiColorResponse(const FindMultiColorResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindMultiColorResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.isok_, &from._impl_.isok_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.isok_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.FindMultiColorResponse)
}

inline void FindMultiColorResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FindMultiColorResponse::~FindMultiColorResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.FindMultiColorResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindMultiColorResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FindMultiColorResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindMultiColorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.FindMultiColorResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.isok_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.isok_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindMultiColorResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 isOk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindMultiColorResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.FindMultiColorResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_isok(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.FindMultiColorResponse)
  return target;
}

size_t FindMultiColorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.FindMultiColorResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_isok());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindMultiColorResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindMultiColorResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindMultiColorResponse::GetClassData() const { return &_class_data_; }


void FindMultiColorResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindMultiColorResponse*>(&to_msg);
  auto& from = static_cast<const FindMultiColorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.FindMultiColorResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isok() != 0) {
    _this->_internal_set_isok(from._internal_isok());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindMultiColorResponse::CopyFrom(const FindMultiColorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.FindMultiColorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindMultiColorResponse::IsInitialized() const {
  return true;
}

void FindMultiColorResponse::InternalSwap(FindMultiColorResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindMultiColorResponse, _impl_.y_)
      + sizeof(FindMultiColorResponse::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(FindMultiColorResponse, _impl_.isok_)>(
          reinterpret_cast<char*>(&_impl_.isok_),
          reinterpret_cast<char*>(&other->_impl_.isok_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindMultiColorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[15]);
}

// ===================================================================

class FindMultiColorRequest::_Internal {
 public:
};

FindMultiColorRequest::FindMultiColorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.FindMultiColorRequest)
}
FindMultiColorRequest::FindMultiColorRequest(const FindMultiColorRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FindMultiColorRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.x1_){}
    , decltype(_impl_.y1_){}
    , decltype(_impl_.x2_){}
    , decltype(_impl_.sim_){}
    , decltype(_impl_.y2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    _this->_impl_.color_.Set(from._internal_color(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y2_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y2_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.FindMultiColorRequest)
}

inline void FindMultiColorRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.x1_){0}
    , decltype(_impl_.y1_){0}
    , decltype(_impl_.x2_){0}
    , decltype(_impl_.sim_){0}
    , decltype(_impl_.y2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FindMultiColorRequest::~FindMultiColorRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.FindMultiColorRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FindMultiColorRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_.Destroy();
}

void FindMultiColorRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FindMultiColorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.FindMultiColorRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y2_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FindMultiColorRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.x2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.y2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.FindMultiColorRequest.color"));
        } else
          goto handle_unusual;
        continue;
      // double sim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.sim_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FindMultiColorRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.FindMultiColorRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x1(), target);
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y1(), target);
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_x2(), target);
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_y2(), target);
  }

  // string color = 6;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.FindMultiColorRequest.color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_color(), target);
  }

  // double sim = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_sim(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.FindMultiColorRequest)
  return target;
}

size_t FindMultiColorRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.FindMultiColorRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color = 6;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 x1 = 2;
  if (this->_internal_x1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x1());
  }

  // int32 y1 = 3;
  if (this->_internal_y1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y1());
  }

  // int32 x2 = 4;
  if (this->_internal_x2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x2());
  }

  // double sim = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = this->_internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    total_size += 1 + 8;
  }

  // int32 y2 = 5;
  if (this->_internal_y2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FindMultiColorRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FindMultiColorRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FindMultiColorRequest::GetClassData() const { return &_class_data_; }


void FindMultiColorRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FindMultiColorRequest*>(&to_msg);
  auto& from = static_cast<const FindMultiColorRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.FindMultiColorRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_x1() != 0) {
    _this->_internal_set_x1(from._internal_x1());
  }
  if (from._internal_y1() != 0) {
    _this->_internal_set_y1(from._internal_y1());
  }
  if (from._internal_x2() != 0) {
    _this->_internal_set_x2(from._internal_x2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sim = from._internal_sim();
  uint64_t raw_sim;
  memcpy(&raw_sim, &tmp_sim, sizeof(tmp_sim));
  if (raw_sim != 0) {
    _this->_internal_set_sim(from._internal_sim());
  }
  if (from._internal_y2() != 0) {
    _this->_internal_set_y2(from._internal_y2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FindMultiColorRequest::CopyFrom(const FindMultiColorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.FindMultiColorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FindMultiColorRequest::IsInitialized() const {
  return true;
}

void FindMultiColorRequest::InternalSwap(FindMultiColorRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_, lhs_arena,
      &other->_impl_.color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindMultiColorRequest, _impl_.y2_)
      + sizeof(FindMultiColorRequest::_impl_.y2_)
      - PROTOBUF_FIELD_OFFSET(FindMultiColorRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FindMultiColorRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[16]);
}

// ===================================================================

class RectRequest::_Internal {
 public:
};

RectRequest::RectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.RectRequest)
}
RectRequest::RectRequest(const RectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RectRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.w_){}
    , decltype(_impl_.h_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.h_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.h_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.RectRequest)
}

inline void RectRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.w_){0}
    , decltype(_impl_.h_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RectRequest::~RectRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.RectRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RectRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.RectRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.h_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.h_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 h = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.RectRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  // int32 w = 4;
  if (this->_internal_w() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_w(), target);
  }

  // int32 h = 5;
  if (this->_internal_h() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.RectRequest)
  return target;
}

size_t RectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.RectRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  // int32 w = 4;
  if (this->_internal_w() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_w());
  }

  // int32 h = 5;
  if (this->_internal_h() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_h());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RectRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectRequest::GetClassData() const { return &_class_data_; }


void RectRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RectRequest*>(&to_msg);
  auto& from = static_cast<const RectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.RectRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  if (from._internal_w() != 0) {
    _this->_internal_set_w(from._internal_w());
  }
  if (from._internal_h() != 0) {
    _this->_internal_set_h(from._internal_h());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectRequest::CopyFrom(const RectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.RectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectRequest::IsInitialized() const {
  return true;
}

void RectRequest::InternalSwap(RectRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RectRequest, _impl_.h_)
      + sizeof(RectRequest::_impl_.h_)
      - PROTOBUF_FIELD_OFFSET(RectRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[17]);
}

// ===================================================================

class StringResponse::_Internal {
 public:
};

StringResponse::StringResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.StringResponse)
}
StringResponse::StringResponse(const StringResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str().empty()) {
    _this->_impl_.str_.Set(from._internal_str(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.StringResponse)
}

inline void StringResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.str_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringResponse::~StringResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.StringResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}

void StringResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.StringResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.str_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.StringResponse.str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.StringResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str().data(), static_cast<int>(this->_internal_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.StringResponse.str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.StringResponse)
  return target;
}

size_t StringResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.StringResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string str = 2;
  if (!this->_internal_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringResponse::GetClassData() const { return &_class_data_; }


void StringResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringResponse*>(&to_msg);
  auto& from = static_cast<const StringResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.StringResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_str().empty()) {
    _this->_internal_set_str(from._internal_str());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringResponse::CopyFrom(const StringResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.StringResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringResponse::IsInitialized() const {
  return true;
}

void StringResponse::InternalSwap(StringResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_, lhs_arena,
      &other->_impl_.str_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata StringResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[18]);
}

// ===================================================================

class PointRequest::_Internal {
 public:
};

PointRequest::PointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.PointRequest)
}
PointRequest::PointRequest(const PointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.PointRequest)
}

inline void PointRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PointRequest::~PointRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.PointRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PointRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.PointRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.PointRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.PointRequest)
  return target;
}

size_t PointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.PointRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 x = 2;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 3;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointRequest::GetClassData() const { return &_class_data_; }


void PointRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointRequest*>(&to_msg);
  auto& from = static_cast<const PointRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.PointRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointRequest::CopyFrom(const PointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.PointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointRequest::IsInitialized() const {
  return true;
}

void PointRequest::InternalSwap(PointRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointRequest, _impl_.y_)
      + sizeof(PointRequest::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PointRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[19]);
}

// ===================================================================

class PointResponse::_Internal {
 public:
};

PointResponse::PointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.PointResponse)
}
PointResponse::PointResponse(const PointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PointResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.PointResponse)
}

inline void PointResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PointResponse::~PointResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.PointResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PointResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.PointResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.PointResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.PointResponse)
  return target;
}

size_t PointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.PointResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->_internal_x() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
  }

  // int32 y = 2;
  if (this->_internal_y() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PointResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointResponse::GetClassData() const { return &_class_data_; }


void PointResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PointResponse*>(&to_msg);
  auto& from = static_cast<const PointResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.PointResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  if (from._internal_y() != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointResponse::CopyFrom(const PointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.PointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointResponse::IsInitialized() const {
  return true;
}

void PointResponse::InternalSwap(PointResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PointResponse, _impl_.y_)
      + sizeof(PointResponse::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(PointResponse, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PointResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[20]);
}

// ===================================================================

class IndexRequest::_Internal {
 public:
};

IndexRequest::IndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.IndexRequest)
}
IndexRequest::IndexRequest(const IndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.IndexRequest)
}

inline void IndexRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexRequest::~IndexRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.IndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.IndexRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.IndexRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.IndexRequest)
  return target;
}

size_t IndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.IndexRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexRequest::GetClassData() const { return &_class_data_; }


void IndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexRequest*>(&to_msg);
  auto& from = static_cast<const IndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.IndexRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexRequest::CopyFrom(const IndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.IndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexRequest::IsInitialized() const {
  return true;
}

void IndexRequest::InternalSwap(IndexRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[21]);
}

// ===================================================================

class IsOkResponse::_Internal {
 public:
};

IsOkResponse::IsOkResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.IsOkResponse)
}
IsOkResponse::IsOkResponse(const IsOkResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsOkResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.isok_ = from._impl_.isok_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.IsOkResponse)
}

inline void IsOkResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.isok_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsOkResponse::~IsOkResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.IsOkResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsOkResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsOkResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsOkResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.IsOkResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isok_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsOkResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 isOk = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.isok_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsOkResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.IsOkResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_isok(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.IsOkResponse)
  return target;
}

size_t IsOkResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.IsOkResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 isOk = 1;
  if (this->_internal_isok() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_isok());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsOkResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsOkResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsOkResponse::GetClassData() const { return &_class_data_; }


void IsOkResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsOkResponse*>(&to_msg);
  auto& from = static_cast<const IsOkResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.IsOkResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_isok() != 0) {
    _this->_internal_set_isok(from._internal_isok());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsOkResponse::CopyFrom(const IsOkResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.IsOkResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOkResponse::IsInitialized() const {
  return true;
}

void IsOkResponse::InternalSwap(IsOkResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.isok_, other->_impl_.isok_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsOkResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[22]);
}

// ===================================================================

class KeyUpRequest::_Internal {
 public:
};

KeyUpRequest::KeyUpRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.KeyUpRequest)
}
KeyUpRequest::KeyUpRequest(const KeyUpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyUpRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.vk_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vk_code_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.KeyUpRequest)
}

inline void KeyUpRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.vk_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeyUpRequest::~KeyUpRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.KeyUpRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyUpRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyUpRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyUpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.KeyUpRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vk_code_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyUpRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vk_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vk_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyUpRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.KeyUpRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vk_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.KeyUpRequest)
  return target;
}

size_t KeyUpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.KeyUpRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vk_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyUpRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyUpRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyUpRequest::GetClassData() const { return &_class_data_; }


void KeyUpRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyUpRequest*>(&to_msg);
  auto& from = static_cast<const KeyUpRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.KeyUpRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_vk_code() != 0) {
    _this->_internal_set_vk_code(from._internal_vk_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyUpRequest::CopyFrom(const KeyUpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.KeyUpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyUpRequest::IsInitialized() const {
  return true;
}

void KeyUpRequest::InternalSwap(KeyUpRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyUpRequest, _impl_.vk_code_)
      + sizeof(KeyUpRequest::_impl_.vk_code_)
      - PROTOBUF_FIELD_OFFSET(KeyUpRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyUpRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[23]);
}

// ===================================================================

class VerResponse::_Internal {
 public:
};

VerResponse::VerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.VerResponse)
}
VerResponse::VerResponse(const VerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.VerResponse)
}

inline void VerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VerResponse::~VerResponse() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.VerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.version_.Destroy();
}

void VerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.VerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.VerResponse.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.VerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.VerResponse.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.VerResponse)
  return target;
}

size_t VerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.VerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string version = 2;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VerResponse::GetClassData() const { return &_class_data_; }


void VerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VerResponse*>(&to_msg);
  auto& from = static_cast<const VerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.VerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VerResponse::CopyFrom(const VerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.VerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerResponse::IsInitialized() const {
  return true;
}

void VerResponse::InternalSwap(VerResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[24]);
}

// ===================================================================

class KeyDownRequest::_Internal {
 public:
};

KeyDownRequest::KeyDownRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.KeyDownRequest)
}
KeyDownRequest::KeyDownRequest(const KeyDownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyDownRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.vk_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vk_code_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.KeyDownRequest)
}

inline void KeyDownRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.vk_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeyDownRequest::~KeyDownRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.KeyDownRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyDownRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyDownRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyDownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.KeyDownRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vk_code_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDownRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vk_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vk_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyDownRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.KeyDownRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vk_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.KeyDownRequest)
  return target;
}

size_t KeyDownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.KeyDownRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vk_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyDownRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyDownRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyDownRequest::GetClassData() const { return &_class_data_; }


void KeyDownRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyDownRequest*>(&to_msg);
  auto& from = static_cast<const KeyDownRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.KeyDownRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_vk_code() != 0) {
    _this->_internal_set_vk_code(from._internal_vk_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyDownRequest::CopyFrom(const KeyDownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.KeyDownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDownRequest::IsInitialized() const {
  return true;
}

void KeyDownRequest::InternalSwap(KeyDownRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyDownRequest, _impl_.vk_code_)
      + sizeof(KeyDownRequest::_impl_.vk_code_)
      - PROTOBUF_FIELD_OFFSET(KeyDownRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDownRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[25]);
}

// ===================================================================

class KeyDownCharRequest::_Internal {
 public:
};

KeyDownCharRequest::KeyDownCharRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.KeyDownCharRequest)
}
KeyDownCharRequest::KeyDownCharRequest(const KeyDownCharRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyDownCharRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_str_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_str().empty()) {
    _this->_impl_.key_str_.Set(from._internal_key_str(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.KeyDownCharRequest)
}

inline void KeyDownCharRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_str_){}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_str_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyDownCharRequest::~KeyDownCharRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.KeyDownCharRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyDownCharRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_str_.Destroy();
}

void KeyDownCharRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyDownCharRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.KeyDownCharRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_str_.ClearToEmpty();
  _impl_.index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDownCharRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_str();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "dmsoftRpc.KeyDownCharRequest.key_str"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyDownCharRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.KeyDownCharRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string key_str = 2;
  if (!this->_internal_key_str().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key_str().data(), static_cast<int>(this->_internal_key_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dmsoftRpc.KeyDownCharRequest.key_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.KeyDownCharRequest)
  return target;
}

size_t KeyDownCharRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.KeyDownCharRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key_str = 2;
  if (!this->_internal_key_str().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key_str());
  }

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyDownCharRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyDownCharRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyDownCharRequest::GetClassData() const { return &_class_data_; }


void KeyDownCharRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyDownCharRequest*>(&to_msg);
  auto& from = static_cast<const KeyDownCharRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.KeyDownCharRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key_str().empty()) {
    _this->_internal_set_key_str(from._internal_key_str());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyDownCharRequest::CopyFrom(const KeyDownCharRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.KeyDownCharRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDownCharRequest::IsInitialized() const {
  return true;
}

void KeyDownCharRequest::InternalSwap(KeyDownCharRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_str_, lhs_arena,
      &other->_impl_.key_str_, rhs_arena
  );
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDownCharRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[26]);
}

// ===================================================================

class KeyPressRequest::_Internal {
 public:
};

KeyPressRequest::KeyPressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:dmsoftRpc.KeyPressRequest)
}
KeyPressRequest::KeyPressRequest(const KeyPressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyPressRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , decltype(_impl_.vk_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.index_, &from._impl_.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vk_code_) -
    reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  // @@protoc_insertion_point(copy_constructor:dmsoftRpc.KeyPressRequest)
}

inline void KeyPressRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0}
    , decltype(_impl_.vk_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeyPressRequest::~KeyPressRequest() {
  // @@protoc_insertion_point(destructor:dmsoftRpc.KeyPressRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyPressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeyPressRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyPressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dmsoftRpc.KeyPressRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.vk_code_) -
      reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.vk_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPressRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vk_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vk_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyPressRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dmsoftRpc.KeyPressRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vk_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dmsoftRpc.KeyPressRequest)
  return target;
}

size_t KeyPressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dmsoftRpc.KeyPressRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 vk_code = 2;
  if (this->_internal_vk_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vk_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyPressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyPressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyPressRequest::GetClassData() const { return &_class_data_; }


void KeyPressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyPressRequest*>(&to_msg);
  auto& from = static_cast<const KeyPressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:dmsoftRpc.KeyPressRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_vk_code() != 0) {
    _this->_internal_set_vk_code(from._internal_vk_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyPressRequest::CopyFrom(const KeyPressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dmsoftRpc.KeyPressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPressRequest::IsInitialized() const {
  return true;
}

void KeyPressRequest::InternalSwap(KeyPressRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPressRequest, _impl_.vk_code_)
      + sizeof(KeyPressRequest::_impl_.vk_code_)
      - PROTOBUF_FIELD_OFFSET(KeyPressRequest, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPressRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_dmsoft_2eproto_getter, &descriptor_table_dmsoft_2eproto_once,
      file_level_metadata_dmsoft_2eproto[27]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dmsoftRpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dmsoftRpc::GetDmIndexResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::GetDmIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::GetDmIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::SetWindowTextRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::SetWindowTextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::SetWindowTextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::SetWindowSizeRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::SetWindowSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::SetWindowSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::SetClientSizeRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::SetClientSizeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::SetClientSizeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::MoveWindowRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::MoveWindowRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::MoveWindowRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::LockRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::LockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::LockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::IsBindRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::IsBindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::IsBindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::EnableBindRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::EnableBindRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::EnableBindRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::DownCpuRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::DownCpuRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::DownCpuRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::BindWindowExRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::BindWindowExRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::BindWindowExRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::StringRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::StringRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::StringRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::RegRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::RegRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::RegRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::FindPicRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::FindPicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::FindPicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::FindPicResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::FindPicResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::FindPicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::FindMultiColorExRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::FindMultiColorExRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::FindMultiColorExRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::FindMultiColorResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::FindMultiColorResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::FindMultiColorResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::FindMultiColorRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::FindMultiColorRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::FindMultiColorRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::RectRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::RectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::RectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::StringResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::StringResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::StringResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::PointRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::PointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::PointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::PointResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::PointResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::PointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::IndexRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::IndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::IndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::IsOkResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::IsOkResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::IsOkResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::KeyUpRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::KeyUpRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::KeyUpRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::VerResponse*
Arena::CreateMaybeMessage< ::dmsoftRpc::VerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::VerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::KeyDownRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::KeyDownRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::KeyDownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::KeyDownCharRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::KeyDownCharRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::KeyDownCharRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dmsoftRpc::KeyPressRequest*
Arena::CreateMaybeMessage< ::dmsoftRpc::KeyPressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dmsoftRpc::KeyPressRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
